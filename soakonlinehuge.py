import sys
import math
import random
import numpy as np


conv1_weight_shape = (8, 83, 3, 3)
conv1_weight = '''恷怱悭徯忶悫惎徎恘忁悐悝彸怠愱忰恫怩徢徽愫悄後彂弅彈弳忟彴彟弞影徏彾彼忝彙怆忴忎彲怃怨怸応彡彟悏径彼恟徶徧忂忷忰忘怣徿怈徺怔怰怒志怠忏怏怍怤思急怷慄徇恑悾弯憰恊恂怛惖弯徿徔彡憻弽惯忰恫弐彡惂徵恄怴弨怳慍当怤悵御慪恄恆徕悓徝忧怟彾愧徛彥忸怦弍弯悇态愁彯徻忽恉怙怔怩恃忆忄恀忲怲忊徹怅忙忱忎忚恏彸恳惣怊惬忉恟思恍怼忡徻忑怑态怍怭廉幎惇彤從恝徭悎徝恈怨怞弮怍惍徣息恏怚忐恂恏忸慱忐忩怦忤忬思怋徘愀徧恛怶忶怠怚德恈德怚恂忹怹怿怬忠忄德怓怑总怌很徔恢彍慔惠式悻恒忴忖忨徦懦怺忡悙弰怿彚当恮愭慬悃徆徽忹忴怒徇愀忛忣恿怷徾徲怗弻憄悊彷惖怣忎忖忴彗戃惛忡恚怽忕徽忶怤恅忔忤忈忳怤忖徼忿怜応怆忆弬徼弰徍忀忂怤忂恅怓忭忝彌徠怟征忕恋忢徥快徏徍怕弙徘忪徉彭徟式徕忮急忌忡御忩徽彭忯徐怆怿恍徘彲徖徍忆彼忸忟忞念怅怅性忁忁徻怃忬忰心忌忐怃忇忆态念怚悊恉径悿徏弲怘惛忼恠悳忥悷惌廫徙怉彼庮形廽幮弗弮彗庫待恀徢怏恘怘弽忸急恰循怘悘惒思弽忄悯怳忦怿忡忲忕忯忺徶徣彳怆怿恂忩廷恟恆怦忰怚忈忶忢忂忷怆怕想惀忻愮怅怇恉恫忂忬恶従怳徿彬怅忑廄彁征心怖弨忼弶弃忨悖愚徼怸悟忾恜悔忸怫悸彨忁怔徨廍恇怪德怛忣忾怩性怛怀念恷悚怑忓怛忢律恡忥怵忭忟忊忧忩怔怰强帾怇恦怱忍悆恴忽彁悆忨循忝弫愍悽悥忠念彟庇彤弿彺徔彙彰思徸怄怊弖慄惢愐強徶恞徿怎廾愙悠恻怈徽忌志忩急怕怚忳式微忁徇忕弅惹惋怺怽忓忽忸怤怉忄忛忒慉慱愌廱惡惮息恿恔惖惲愜弣恣惊惩愚惼憂憁憀愌慾慴惷愈怛抦扗扖忞戣或惤憕愷憁憀截彠慏懰惢懽愷怩忟忘忢忿応忆态总慶慺憶彬憯慥愫慓愼忙怷忕忇怪怅怣怪忩慒恺悴惏愫慊恷恰恷愎徚怐慝愹慾惨恽恑情彥彚惲悾惟悗悧応愆忴怨愍惌慌恣惒恰懂征惽慑憅戅愼慴愷怼怩怣忨怃怅怵忒怞慹忖悬慊態憀恥悵惌忚忊忴忊恁怡忲徿怹徃彭徬徻彺忢忁徛応怴徢悐忑弌忠忎悥忕彫忷庴恲忾廡徲悗怂忠徺彶当徺往徯待忟彴彨徕径忢彚律後徺恣徱怚徇怠徜忭忣怠徂彄徧彩徉彸徔弴彌徥彿怆弱徽彺徠徣徟御役心式徤徬徴徐徜怫怊徺怎急怫怜忝忢怴忉怷恋怚怑恉忏忋弊役弡彵彮徳徛徭徑徹弟彍弜彻徴彼強忇徦忣忪徻怓忘悌怹恮怊徚怸徬忻彪惙悰忏徨徇徯忲怒徺怱恤忿御彗怆彿徚忖恟恓忊徼性徸怦怆忪怭怚怎怮恅忐必怅徶怨恉怡徐徿待徵怡忏徎悏忳徃徺徬徙必彬忢徆忱徰德徺忒徜怆忣惹徂忽徼徹忉怼忢怠恧愡徎忍彂忪忼忍忌忮彜彋彷彜得忟彥徐恠忰怴恈怚态恅德急怷忖忝忀怲徵恂忿怟怈怭徘怆彰怺忶怍忐徊忇徾律忉徥徭忁忓徫忤忨忊忳怷徙德愑怢忝忑忽徆忱徨徎怗待彪徂徣弿徘忸忬徨忓忾彶従弜徚心徴忪徣彸忯怋忆忐忴怳怮忾怿怂忢怙怌怼忺徵忮忟徽彵徴徐忀徇忏徛徖忙怃忲徵忢忒怚怠彲応得忹恍忯总忥恁怊徑微忤怳忂忍忙忢徬忾忈忏怨彾恈忎忄徙徿彎循怕德忨很徦徭怙忐忾恅忯思性怅恂忧忿忼忴怙忼忂怆忛徚愐忔怩愋忁廞影彣怇悽彮悮慓彐弡彌弸庡待徺弴庑恦彯影徂愓廇忋必悁弳彳径彤慠怡彅徯悗怗怛忂彦怢恁怾忴怸忇恉忿怒惨怠彈忴恢忌徧当彭怕忛恁忳忶忾德怈心恨張廯彽悛徐徍恆怆惈忑循忷彩恰彬征徯恻恟怆忐怠弖怉忮忹惁悅徏弦惊怕怚恅恰忿忡徿弟怋恊徯怆徙怬心怡忳怗怇态怤徶恘怣忼弚怵忬当恡怙总怅态恁怼怦忽徸恊惧弩恁恵悦彩帺忕愥忥廥徇怫恱弛恉徨惆徘怡彠忎徭忙恆怊廟念廑忈悛悰廘忪恅患忛彈彼惪恢彔忂忲惦徶忘怑怐忾忲怵怜怾忽廥忞悵恀庱怤恛恥恁忬忛怊忳恆徼怤忓役従愮徵徱徒彂德怤彈急惞弝彪彑弾惀恶怖态弎忺彘徵忊恬悮彭怈憬徛强忬弰慫怯彛怭愙徠彏彻忥愡恣怪徼忁徿忡怶怣徵总弄恡惓律径徕徠悗悗怉忙怪怐怾怆态忮忛恸弳怋徐张廭徳彗恗悟廳悊彏彣彶弜彊怾怐怂弽彖忦怬忿思忐悙徝怉怜征怋怤怨忱悞庹慓彐徰廮弧心恠忭忩怾忛怞怽徹忹忧恢庪想徴彵彔弟录怾怤忪忁怫徺怴志怺忾忾彣徢忖忎忘忞怅恒志悉忤徧忲恦徉忮忻彘弖怄徶彵彥彟彌忈忴弼悖恊忹忨怒怄恠怡怉怾恧惊怦态怀怏徰徇忐徘忘怩徹彽怳彔徫忉循彭彺心彯後忴怮恰忠怾怏怐忘怜彈忑忎徚忞怉徊忮忽忦怌怎怦怅怘怀忟徺徺怑怤忔怶恈怄恉恅忟彛徑彥忞彧彺徂從怋徟必徰恈总徇怱恚忏忰徭徹徣忓忭忮彳恜忽忯怑徫怀忹忭恌忪弐忈徕徧彬徿微忙忩径役徵恂忉忪徐徹怌忇徻怉忼怖怢恊忶忖恂怲忋忝念忎怒怽忂彵彪怙徃恧忖忋彊怊恂忮忝徽悵忝忝忻弧彂彀弜彲彖彠彙弢忿恺怾思怗恿怩恇恘怠怄怮徼徛悫忸忕怗徝径徸徾忉恢徬怉怤怼怕忏忠忐怡忎徸応忳怦忋忯怢怌怴徶忄忨怂悍怑徹忟怐恅忍怬悖怽忠怱怰徳惀忡怤怿愎忥徢忉徢悳徿徬悒恴忓忤応徼悍忛忆恅恏怋徘忧忼怶怎忽恱悓徨忟忄忭怉怎恉忁忦恂忯怋忒徿怠忨忶徵忝怂念忸徻恉忞徱彞志彡忖彨快徵徂徇忬怊徍归彧忟彮怹微忕徳忚復彣忡徣忈怘忣怛忰徫彥怒忣忊復徵怂忮忢忳微徸忶徯徯忔徑忉徏徧征忚忟怌徺徾忀怴怙徸怴怱忄怵怠忈怒怃怓忟忷彼忝忌彚怲忒忍徭徴彂徴怃彘徒彻徨怂恀愴怯怱愨怬愰恅忔彺怓徑徻怯徾忖忣忴忛急忠怊忧忉恜徥忝怢怩恃思怦恋怐怪忠忋怰怟忊怱忊忪忉怿怓徺忰怺怜徹忤怨忌怑怄忐忒徬态徻徲徬忯怭徸忁怪德徯徹恀徾循徯忱徇忊徢彌怢怢忎忹怬忓忞怽怼忾忸微忳徘彺忸忉徽怷徵怼怙恆恂忐忶忊恖怡忩忚徼忌忽徍忍怔怠怤忸忎怼忈总忲怈忯忒徯徯循忖恃忹忟忿怍忄忚恈忏息忳忺怋忹忾怬怞恌徝怑忤忎彞徼徠径怟徨征忝忦律怊徵忸徴徥徺怙德态怑忹怵怓忇怉彰忡忇復忻怉忺忖心忷怪忣忋忈忥忓忷怯微怅徴徼念忱徾彵忒怘忿忰忺忬怔恚忍怱怤微恛忆徲忞怙徿廿忍忤怑怄怬怵念怡忶忕怔忾怀德忉徊怉徙忣忎怸怠怒忞恊忡怞忱忒忣徽忇徛快忈怺忙怑忠怵怰忏忛怶忳忥忚忎徴徘彯忣忁彺怆忠彩忯從律怗怈忉忥忾恕徨怍忙怆怄态忸思徠忣怡徰忇忛忪志怼忮必性怮忘念忺忙恆怘恅恂怲怸忺怀徯徘快徥快循従怚忨怒怓恀忣忏徻忩忝忷徹怊怛忴怤忪忀忇怣御怎怗徰怉徵応忷忎後怣态徵怛忘忓忟忕恂忬怂従応恊怭忸怤恝恏悗忬恜悡応忼恖忺恆忌徜怹恞忪当弯怭徸恺彚恑恔忰徂徳怚恧恔怌悠怞忴忧忲御忰忢徑忙怉忍徾彵怄忱忷怔怛恃恆徻忉怼忏恁徻忿怌总恄怣彡忮徚忌忉忈徏忨徖怨思急忍德恄忆徸怉彺徦徂忈悤悤忞怉微徴怚忮怄怑忠忢忟忆徠徘徯弻怉怎彼忨微徊忈徙忈怘怯徇徟忖怶忀徿忚态徼怖怂徼怷怌怳恂恆怴徺忉忆忭怜彙忠忦怖忯恫忀忻徰忈忏忌恜忣态怬弧弱异彦彋建怜延弄恓恺怯怪恒悂悊悸恓循忣怽忖忯怖忿徸怇必忡徫忚忣恞忶徵怇忬怉怵徿急怘怕怍怭怇忿忆忐忼忑怦忝忙忌怶怏怒息忢忥忚怑忚徨忀忮怍必徻忈徿徸徯忕彑徱弤弿彟微忓忷徽忦恓徺怖忆徹忢忏忌徱徢怠忒彽徺徰徸快徜忕怰彧彶徾怾怌怬忟怣怴忠忊怞怊忾怱忲忼怆忴忓怨忔彐徃徒徚彾役徬徆徯彪形彺彍录徤忝徖怦忠怊徔怀怞念忊徯很徕彫待当得彴当忣彻徉彼徖彪徑徧志影彵彼徳弧弘徶徱彤徭怗忢忤怊怌怱念徻怹忸怺怇忿応怹恊怐忐怂彅怔忹復徵從応徸彳徟弙彥徟忴心徵徳悒忯慈愁愦怷怾忱恱彊彽忻快忣彂录彖彿忬徾恉怣復怲怹徖怏忘怲怲徹忿徻忟徿忽忎徲忦徥怂怞徐彽忽忡忇怴态忩怹怡忮忾恞悄怸微御怲惠忙惜念怞忭怡徎悥惷怀惖径忭徢徴忘急息彆怅怖恐忈忮徴恧恛忭悋归徆弱徖必徿恜很忰忶忀忶徶忷忛怤忓怌循恛怦忊忚恔悴彥悃怲怡忨怠忀恆忞忯忳忪怜忦态忮怂思悞怏彚彻徖忎徰徹徙悉怄怛怓忢恾恸忧悢怸怆彑徜彛徐弞忐彖徺彐徜怄忙怾怂忥徴徔徃忈怋忈恀怹忤怪怷怶徐忛彩怃徠忈念忽快怿忙忴怌忈忸怑怦怟彦徑徢徬彳彠彅彻彏怎忊怚忁怇忮忁忽怂怓弭弰御弱弛復徜忆心徺态很徟忇徙忸忊怆徺怱徇彤徹徥徽徥怑徹忶怩忮忾忺忷怹徺微徧忓役忌徺徖彭徿怔念怨怎忏忸怒恅忚忋循忑徢徹忒徢忁态忊徤怆彩徨忴役徆怜忥忩忬恍怩怙忭忕忊忏忙忕心忘怈忥忖彣徽徏徬彜徵怂徃忖忪忖忐忶忥总怏怌恄徊從忋徚忬忘徵忤徕忽怤忮忻徽怜忷忁怒怨忩忇忳忒徿徠忽徼忼怉心怊忂徫復忍徦忯怍忆忷忴忑忶忬怇徶弫忂思徠彨徹怇彟德彝怐忕录忨忞忾徖徥復廬彉彍彰忑徂徨徉彤廊彤弆後忷廸役彍徙弟循徲弧怗彟弦弴忄废彾征当急庈庼忬志徸怞怜忡忣怩恃忮忣忸徸怩怆怣怠怒恒怴循徐弎怍惍愄忎恏恶怡忖徼怕张彔忏恜悫弮徛忦征惀怌弨忷悅彥幠徝弋慍心彩怛徍强徬忲录惋忼彩徣悐弚弩忥彘愿忼弧怰念怜怺怓忓忹怇怘忷恈恀怘念忬心志忶恾恇忩悘恿忦恡恆忴応徖忖彿徻怋徱徿德徹彠弼彳徱徫役悐彪廟彚庱徳强彋廐徭廾形庄式引徦微彤怪廫弴彜廫徖彔彘彘怪廁怃怄怖忼忰怱忺怋忕态念怷恃怛志忚怊怟待復恖忲录怒恚忓怍庳弽悸忬忋怔忀忏念廧忸快廷慡忯幽怭忺悗怽恣弰患忱录徜忉愙思恢弝恅志弼徳応恍恎恤廠恵微彦忥忙忻忴怣恂怶必怖念恂忂怋怟忟忮忯徿忆忲心念恝怙忇愧忩悟怓忼後恗度彺怾忱怗忭怜悭悹悾恞愆悆恄忳恚怆悷恽惀應悱恪忺恦悩惎惮愊憩想惆忔恎悦悐愝惄憄愍惕怘忶怆怄忒恁忥徾怬忣徶徽怈忑徹忧恈怢怳悃怶忴惸怔忧彌從恠忄愾悁恶惫懫怋怊惠廩幆弌府弾弦彙徶恇恺悁忌悓德悂徍怦愠惙愰恧悤恤感弈復愜怵徼怶怽怪怅忚忻怙恝怴恀忰忸怿弥性悟徻忺忔怮忏怇忥徿快怯徥怑忚彌忂怾徰彏彫忱怄悳忣怗弻怫悤怕廪徂律廔帄怇廥廍忓惛惶恜惂愻怯愞憸忇徬悛强忳徇廦怔恔忁怅忂性怄怺忄怉忼忮恘愍忯惎恴怞惢惦怸怈怒忥恉忻怓恈忌徏廚忉忸彎怟廌彰恾彠徤悎徺怠慉彝悍恰忚彶忸忟廙徤彠彏帱徽徵慅恵憍憣惦憊愦廡弭惞徚怓悪悀悡惥怈怃怀忈徵忭忬怰怐弶彰惖忸恔惂怚惬惾怒忇徼忽怀忬怼忋怗扌憊憛戎徙愦悄得恙慂愚愂懤恑惣徶弮惨慧憁懔慶幹悲悂懌恌扼扇扩戊悳慫恱弶憜戅抃択扃悳懜怼惏扷志忇忱态恇忪忚忪忦戣扨扽戥恔憣恙悒憢怂怂怩态怤怔徻忚怿懚戝慅慸懯憨憾惸愷慶成憬感慳態惻恪情惔慯忁愈恞徽恼恟廁戓戏愎憬懼憫憽惥悘批扯憒戇把憹愷惨悫忶忆忩怠忡徻恈怯忉扝找憔憛戔憁愳愉惸恄怾徺怮忲怞怸恉怄弯彪恬彣弧彞彍徏忑律廼忁怟徚忚忳忑弯怀彯幧彅弮忴怍弛廩怕惶恫悫悈恍恏恣恈慙憡惦懆憃惴截懡悕志廵忂徕忹怄怰恙恙忒慷恱息悯忓惼志怑徾忚怄怮怶怄惭怍忳悳惒悄惒情怙悟性怨徽徺怽徼怾忉怅忢恁忠总忼忛怍徹怺怣忓想慼帿憨愩忇怎惰恢您愪徶惭恿弸恕怡惸怃憩怬惿愄徝彳愊廪慠戃忽愆懬归惌愭怗愾憜徃惟憨弦息愨彀惁憮忮愨慀廞悭愣忲恀怴怰怱怀徹忻怍恉忕忲徼总怴怀怼忩徾怅惕忳愢怗懅慤怉愜忽徏弙愡悭徜懡徍廝彬怲弮怎忕悇怖徽悷彨悌徺悪慄悤惢怩怍式急彲悡悗悴披悡惍弩怱徫恾惖悏愖怱想忏怲忂怺怠恄徻急徶忒応必忻怡忣徼恊忴择愽怘慚懌念愠惥悺拣懞忯扁扶怾恦憧怮意悞忶恬惪懱恎惴懑挪慍忌愱或恅悊戭憇拯懐忬憪戂惘恲戎懗搅技忤懁挱思愛捞扴忖忌怏怋忬怬徿徹忩怙応怸恋怹忨怃忋忘強忢悍恘愦悁惏惑慫弶快惽悌怱悌悁惶悰忋徢忝徴悾弊怐悁怑弖徟惕恙惑悛忞愲愗徹忁慊悦悫愯悍愛慨徂忺悲惡惃恇悆愙慳徶念怉怬怇怘德怆恃怘忡恈怹忕忹忻忌恃恢恃惶帪悺悑復恔徊愂心恼息愌惡惾恩廲弪庾弾弢徇庒弱彛彜惼恄怳恪悦惴悿慱弝惒恂恾恿恤愗愴怲录忢忆怉恅忐怫忕忠徺恖志悄恰悬悎感愗彺怯忏忴怿忞怦忘德志忙忐急怣忤悐從悓志怰怨彂恂怠惜悍徬忿彵弼幼彞幩巑徍怏彅忎怋忙悥恒悏恞愋愼怱忧忭影弥忂徿怌忳忲怒忎忣怓恇忡怖怪怢恶怚怬恑從悘怽总忯怓德恂忱忐徶快忨彵悄恵彃庱彫怐忯惤憗慥愗憠憲後彅悡悾庸幭幪帒影廀帏廽庫懅恶怿懣愷应悗惗恚思惓慐恷恮幾従您彷怹怢怸德怐忒怰忂总悉悱恅恡您廓怑怱怃怹怞怷忕怛恈怤忒忬扁弉惪幼戙怣戽怡愂愿彎慷怹意惟憰怦慳憈悥惈懤憆愉愫恖憄拘廎戃應抑慿戹庢懮扶廀戎憥括憗戧悆戾怷忩忘怚恀恁忥忬怀扽強戹憚戴憘抑怒懬忂怶怖忑怯怞忀忠忄扻憷悋愅懢憾惯悭愇戚慕怂悠愊慼怍恟悿恾恝怾惋怽怭忖惠恶懏憍怂惴懃戎徬懆愈扖憯弻憷懑憴徨悿悩怣恃忲思忺怲怃怵忧戏懄怤感懽懝忾愵惼怟忈性总忴怑志怏怿忈弶德彶弎彪怘徐怣悘悔惹愵慘惷悦憬憩徆悮愺廊恬愪异悷徵忤徫徐弧怀彩怠彘怒怴彮廀忓忀徑怪忕徖徍彺悖息彄弍徟归徫忣彛怽怊彍弋忊忇彲忖弶恧怭忊形忺從彫忪徸总怐彥彛徾怀彣怇忑怞忦忠志忇徹怙忽忻怬忤怉忯忁怂忽徳徯恝怷彭徑弽怱恃徭忽忠惢徺悤忴忛怪強悌悊徜従彶廞惐怿弶恻愗惄弱怨廯憞悯彚彗悞惾徼徿彻怃怀彶怹恍恽徍徐弃惕悳怩忰忨怴怏怒怭徽忹怤忑怉怭怣怘怤忹怈忙很徥忑怒患忛忌弾怅徝忘忸怢忥忴怂怽徹応廿張录怖怄恖怤恥志彬怇彁徠怵恚忟恚徶徦忆循怗怗忺志怗怛御形忋忿忤怿徧怺怜怰恂忷忎恂怺怌怸忨忣忈怇怚怬忒怱心彠従徨憉徨怌忞徶怼忥忶恘愻彝忽怸怤忕恦怀怠徙徜怿恚彻忉忎往怄惊志恙恬怔怰怆彾弤恦恎心恤恠怚忭徲忥恧怬徰怸快忴怘忕怞怚徿德怂忮忈怏怃忤忉忢忬忓怍徼恗怨忳徤徑彽徴怇怩怶怚怌恑彺微怇怞怚徽忻徵忩忔忲徔怭忓彧忢忯徝彈忥忷怉怄忻怌性忋影徣徏怖忀怆忎怺微彊徾徿忯忢恃忣怞忇怗怚态怊忼忸怩怃怄忕徺恁急忧徤快廨忷忚徭德廵怴忛惞怗愷愑徸怏徕徭帴徛廢帎徜徤彩怛必怶怀慐愃忪忁忚彳怟恳急悑慎忒彰忛彀恂急忰怴恅忷忈忓性徍徣怪怮恻恟徙悁弪怛忋忴怱怓恇徽忀恄徣張徉怽怴恐忠悢彔忿恮怕徔恁徙彊彣恓忚恝弌怂恌强悊庶忷徢愡悦忍後惈彳応惠徛怩徭徖彡恡彋彴恍恂忺忩忳忖徹怊忦忨怐愔怵徳忶恁德怑恶怷怆怚怂忲怨忝怬忸徇廝康忕怊息弽忒愥帧弒忄强恟庻恹恤悛廷徢怒德徫徸恍徖彷幺彺忿忕悚廳徺憔恭帙弡徱悍徯廴忝愩忑恈怆忍怆忪怺忎忦怨嶾廉忺怹応廫徠愕忸怖怡怭态怓忴忛怣徸徯忶愽彊悁忺惰影懕怭怡悡彼恵忌怪恝悦恨怮懈彲愻忳悌庣憮彗惇懃庚战忬悽怵懙忱悟懽弪戅徜懌恗扐思忻怪怷怼忽怊怎怪忉总愵弆憶怟愉恅戎忒怳快怌怫怳徸怕念悐怺慎怚廱愵庛惐忶徏忒懍弼强愋廹恆悏怎徚愇怍徰惸忶悿恒忀怪愷徃徐慨弳慓忢怦忠憔弭忔懵庽慃急怮忘怟忎忈忘怄忻忭怐忣慟弐弉慇弍慼怋怍忀怃徸忇恃忖怮応待忛徍彃徦徙忳弆忸恀忷彶态彺态惒恍彺您役怚恙怬彌忶怼徔怙怮悆從徾恖彿怞忲息恔悈悋怚悿忽悩态徧恖怂徭徽忆徻徴弻忡徳怔径怂忭忦忑徴徱怙恞忦忁恆徑忌彦循徫徊從徶思当忕征怟徾徽忲恀忍忚怲怢忎忢忆恁怜怣怖怤忐忟徫恏忩忕徨念怅恑忿忡怙忡徎忁徘彠從怞徑怰徝忂怑恸恼忋怺忍悪怷得心悦怋忎徧徻怣思徟忓怍忸恅徸彡怤徣彁彶悏忎忉德怬恃忴忖忸忠忬忎忎怅怅徾徵忁怠恆怀怯忻役态忋忥徶徰弳怣忬忓怜忥恎志恘恖征徤彼徍徠廡归怆忎恃悑忲忬徔忬恉忹恀忴怺怂恎忚忔怙徰怌怾忾微徼忀忿怵忁忣怍怚忍德忼怗怷怬怹怌怑忘忦怐忋徶性怚怂彫怽得态恃惼悄怙忭忰态徵恛怓慊惢忖循恀怢悏怐怆恆惐忯怃忔忣怇徾徵恵恾忠徺忙恀怲徟忉悔恭忈徠忝念忺徹忤悔惛徹怃怘徼恇徺忷怅怠怐忡恄恊怗必忬忥怛怵忎忕怳怵怸徲徖忻得怵徢彛徦怅忄快律忀恌恩怪徾恔怩徽忧徵忶怡徴怮怬彥忛必忠怸恿怖徴恛忛怫德忄恋恝怬忭怨忼快忍必态恀忕徼怔忩怅恆怕忋恂怤怤忞忄恇恇忔徶怱怷弆忠廓廤廟弐忯怩忳忘徯徳徽廦彎彗弋徔忕彿怮忘徤忄弞德徏征形徑忝彿引怿惐忉弬怒彔徒弾张忚忱怚忖怼怢忑总忎徖徹彎径忯彗忓彵廁徾恅怃怩忂怠忞忐怠忄怊怽忺悜恼恂怱性忰忌忔忥忮忏忶怌忯徒彑彻忒恣彏彬彔忖往恤恲恏怟悼恱怪怣彅怓徤彸徛忕忹当彲忽怃怞怂忡怎怿怃忒彰悓怵怕怡恎忭怤忖怍忞徻怼怏怪怡忮徵惴悂愃忥怆怣恠恆彥恸总恗恒恬怋忸悯恱微彙徱彎徧怟徠归徕恼怯恓怽忻怅惄悧恎怪悯惰恮後彶怒悺徛忓怍性忛怚徺忡怗忪悒怨悫怡忧怍恞悜忼忖怟怟恊徵怤怒忾忦恻悆愉悙径弑思弱弓惧悀惡恲彜徸忒恹患怄惡悂悆悏恳怎惐弥愮慪慥憓怋徙急恈怴悛惜慨愭很彙怸怌恺怢怮怦忇忟德忦恀忈恵惪悽愢彥彥怪悽怹怌心恄忱忦怅忞忹忼怱忷恱慅恬悔恻恎恕恊忐役愄惰恡恚悴怅彻怋恺怵悆怎恃怓怶忷忘徚惇惆悐恫恮忎怶廒悜憢慻慪悀惆恜恉忛怱恋怤怛怬忧思悓弫怋愻愙悠恿恨忀恅怑忓怅怰怷徻忽忕忪忚応徰忶徣怄徦心怊彲徭忉怑忝忯急怬怠徨從彮忟怦徜怾忔'''

conv1_bias_shape = (8,)
conv1_bias = '''忲弤忠怙忌彻後徹'''

conv2_weight_shape = (16, 8, 3, 3)
conv2_weight = '''恬徘强彔往悄悍恀恝悿徰弶弩惢当恍忐忇徊怽弌悞弧性惂弧恇怟悈弎彴忚悞惞忷彙徯弿徝彴恃恡彠悔徺彊往恦怦总怤微恡彅彣廻惍恔忈弸強強徾彸徝忭弻怛徒忔忾悮徐悕悓惶总徍忎忞徊忳徧忳怐恉忞征恂彼強彘恫彄恂弴徛忳惠弗忉彷徥忿强徆惍惥徉廰征忄弛庠怊恄徫川幟嶯巐帔弥己御徴惱悏怬悞怅态悕弲徳彿怘忲忈惿恟惧恨必悼徾彳弙忨心忰怙恹恞恰彰悜恥彮彰忙弬忨惈悗彐悜怑彉心彧怛彨怤彆悟忲忣念怞幦庇庞廍悚忂恷徝彈弘徟幣征怀快強庙强影忩怓彡彊彟忔彇悦悢循恶徾忕恛彘弦怟慱截扥懯懅悚惪惻悷惟怏悵怘徝憶意惠愡恌悎忚怤徆弘忞惻悗忂恞忲徴彸忕悖忰影抐愩憢抖扜愁扴慬抅懿扊扜懟憼愽抇戰懠惨抰憧折憷慘愵拎扁悂慦慃忔愯忆悾惌恺徍弦廖律弸彮徘悤悊惥怜忰彿恆廛忞徵恀弘忓廵徎彃忧悝悬态庍従徛忁志忰怆恻微弲廏悊怰惍怹恠恍彻怫怳悅彿廙弔廽彵徸忇彎恕怖廴怒徠恄序彊怍忳德廖忘彌悍徜恪怪忐彉惍徑当悈怋惆忈恿恫怘恞惟悃惊悵惟恆恣彰患怹忖怩惕悦忙弭性惔恊惙悧廇弢庎惊弪徫彻恴很庼幡庞弉弦座嶛廒徎忽悼忴惜忎影愊循彌怓悗徙忶悑徇惣彴恫廩怛快惃怊弽彬悅弚悦悀恺忨急忴志忐悗彮恛惆惁徔悱彿悁忮彦惖徫御彏悴惿恸恐影弅廫徂恫弬怙徢弽帰彑幩庹忒徢庺已彩恶念影惥弝従您怬復怿彻恦恕怘惉悰怾忆彩怰弒庳御忕怃徿悁彘怕惣徉弇悙弶忱悔忖愬怒微庿弰彙恨廰廾彉律弒怈庶彰彝幄庄惒弸嶂廓帎幅廩嶬御彴怭憋恸弧慸惜怗忆庼惙彡恳怷悻徝思弪恫惃彭幾忠忏徯忏恰弲彧徥徐恄悠弲忷悽总式恡廞彏廟怆恈怍悙彺忢恦徘徖彸恺惢悅忝彗恬恳彚悛恲怫彏廃恌弎庞忾庝忚影廍幃幒忖径弩庂忛彀徍忓愙怖忯彵彾快弱恬惍恢悬惪弔恢怘征庎彦幸忋总廰彬忏忠恃恶惞怗徦恡悛彦忹怜彜恨恵弘恗悢悫康徨怆征悟弶总忴徍惗恪愾怋怮怒恥慽弶彣彎徱恙惣悌忦彗忄彆弱怓廯徒徊幩忈愳彉弝廎怏忡忂悒廱徂忕悀悑忼徸從弘恗弟恞悖总悈彟徕愠悟循彂悬恊忚惃廼怐弣悮徳惁忟弫怆徛廯忦惆怛弱忧徱律忒怰彳庰徜弁怐悛幞弡徖悜悇忸怹忦廃徆悢悎怛廷徘怄徳徻恣忽廬徼忄愁悋弯怉帎怂悖徉彡彮恑愊悤怒徖愨惦很恀忪彙悟惚忰怰惝廼忢彰恵忽徉忐彞彏徥廝徦忈恼悂彫愼怮快慻惃弛悱愲徕徤惾慅怹恛廴憋徴廭彞庌恽忕弚徍弱恖忘微幨忪怡惰忖恨彼弬悄怇忧悰怱怬怗恟恷怱惟忛惀悫彳悬忮怑惬彺弶彂悚怌徲弻徂恴惆復廍彦弱庝忖彇强徸幰弅庛廪廢弁徔帻弩弌愙惡忤恔忼悮怩徆惴弔恸彫怟悰引怼悱怿恜怢徺徎怠恖志彇従悾徕忭徇怿徑弍忣忋弅恹思怈悴忌徃後弡忽弓悕恈從怾悉弡弟弔彥府彐廍幹庪廉徜度徖幸弾忮幫形幞弤恟恇忓彮弑徉徕恩恥怬恠悷彟恁忴彠彟張恟悉忏怶弁悔弔強惌廎悀忒怠悶彿恼彈归忯徇徨徵彼弙恫怇悀恌式彟悏恦忉怏性恏弸忕弽怱怿彜式徿弼庐幻徑忞廠怜庾弨廍忣弫恕徘恙徸悧惄息彷徑您恱徧弄弱恫惆怘彘徙忨怓弻弡悓廽弨悞惄恐很徣怤忖惙恃弲悉恧恼徶忳忚忍忎徭弃悀廐怖微恃彂恕弆弘弍廘恐恇怮応忍恴忯彰悇彘恧怮弅恀悃情忩恦彭強恕恽怬廻弸徕恑惏忓彪徑'''

conv2_bias_shape = (16,)
conv2_bias = '''庩惝忴徟廳恎惔彪忩弝彷弰忭応忳廌'''

conv3_weight_shape = (16, 16, 3, 3)
conv3_weight = '''恈彞忢忼徉心忟恪徥廱怡廬弩弢恖忬总彩怱強忪怍怛忐徛彴弼幊弾廭彸彟彩徢幕廉従忁悑恍怤恬恆彩徼弐廟弃忢律忞恋恕忲怒廰弜徲彛弣彃徎弔彁怢恉悵弿恮悬悪忭徐彛彗怊恠徙彺彃徟快徎後弞恁徳很徊彯恪忞恼怳性恢忣录恠徲忹恓後怋忛忙応恈志弿徏恭忖忓恋怃恓忒怰彮徉徖徾彏彙弻弱弭徝忓弼怯從怨恫恰恩彮徨彩恟径彲彥徤徢怪彇怿怾弞怿怿庵庑廃忿彙徝怍强弊後恂徵怩彽征怌徯恌惇愗愁懘戁憘愬懥慫恒怋惜愓徨徼怦循忰弿廸弊忏彐徚怢復律庺忁廟庱彸庛弞弟庳恆怪慸慁惻愹慐愖慩彜忽彶怜急怯徤忋彎忋彖待态悶快忳惔怖忩怕恤悓悭応弨怭徿悦悥憢懝恶惕忾恫惎恕彦徘徨忿彏忸弹徫彨循恏怨徵怊恐彻彏恖怳恗怄弞徎弓性忔忩忞您悟怿悓徖总恁彣恵得恩悗怑御征悂恀怽彠忧恠忺怪恹忸徉彮忿弳徽怫恓徖恲怣径從怗弪忬彮弸怅径恊徵従忻恇徫彙徭心忊弧忢忦徔徯忀忰恜强彠忿微彙恡恔忲徂彝彶彘恽忰怕怃徺彴徽從彃弲弲徆徍彜恂怓忲恳徉怣恕悅忞悚徨彛怟徕徿怜徢忹徹恬徖征徏忱彯心恏恞徆彯彿徆彝徃徑忉彆徵忷弅怴徯弽彌徔彊忉忤恎徲彙怉忖彃徫從怪怹忽徜恭徕彚恗悢恪恲徊悟忛徽恉张恫徍恩徤彺徍忍恝彰彙徒态忭当怹怽弧悇弲您彶恜徎彈弦怹得彡彯彋恠彡恦彻您忀従形彔彳忴怮径怼忊彉志忐徖恡怬怾忯忉徾恄忳恽従彋徳总恀彴徬恱怖彩恩思怤彄弌恜廵弯徫怭弋恗徊怪忊弤弿彿怶忉徒徚惒您性悁恬彩微恐弶悀态徣忍弾怛忾怚怏恡怞恍弶徯徃恑怼彗徭怃怆怭弽恚恐弻彖忷彜忦彙怙彼彘怵怶悕徳悑忈总忳悟悏怋忄忨応怫待徾彚恏恡往悎往忎忯悒忓忘忦忱很怰忢怦忊彖怄彣忆恱忏怴恗徤怙忆径徸恈怈忛恙恦恚恗恚彣徧彻怰恱恼彡怎循怞徽恷復悆怃彟怹彠忠悔怋恍彺怎忲悖忣忣徚徠悜忚很彡恗徸您徖怣徘彼御忨恵悏影忲忚志忺怶彩怊恡徼徹忂怜恸徦徾忩恾怕恚忡恩忊彦怬忍悗彘彫悕彜役忙悃忦恠徎怺悩悇徱忨忼怪彳悕恨态忦恝彫怿忏忣恳徹忣悇忼恄悃怹彝彍彯忿彏怒怜总彐息彎弙恖廚怈弲弍徊忪忒怕悂徎徛徵恶徒徴怡徹徽恨弹忱悅恇恆彰徻怼怆忨恝強弸忰态徍怂怞忬徠恛徨彙悈忢忕悓忚恅怲忋弢徎忮彨怔忧恸忷恞彚彡恇恺徏循归彤录忨弧忭廓怾悀怘彔忮怑怠恖恻怅恩悔忀彴怲忋怊恝忻弿恸彠怵彶彘很怪彾怍彫怈忚徍恧徊忱彝悪忷恇彜恴忚忭徿忷徠恶彾悌彮录怂很弡忋復彛忤彂待彸弻廲怠忾悒恷弶彜彺彞彄怠徦怶恒总忙恮忱恱怶怭恏律恊彫忹怌怽彄恕彗彧忈弲徬弗怆弿彊忈徾悌快彼忈必恠怰怈忥恃悳徎弯忒彫待怢恣徒悠微恃徨徑徛恐恖恌彷往怐彶徍必忾徱得彁彌徍彾徔廸廷徳怦弛怿怖彨恏忽恕彧思彑怾從恾恧志悂恒怎徤彼忄徖彲弫怍彑悛悡御悆彥忚快怳怬彰怓悗悎徜忈悔徾怘彔恇忪怬怳怋從忤彪当彾悬彤录忰恭悸怲悐微忯怔彶怮徱怶忳忲恹忪徝怒徤忛恟恥恃怱忝怍彲忩恨徧悧恂怤怇徚徔彻忦怪恳弎底弩徬徦彽弳恐忴彏怢怹徏恰彴恀德悑怦恄悮念怈惂怖徤怨悈忭徬惲得怠恒怶悗悧循徬徽忽惘惁忌恩悷恖徰忱悻悉恥徭忟彶怴恢彯悥忍怱恾恰恈怶怌恫忚忇态徆恑恨徥徫恿怉恌恤彪忊恂忏忘恎德彺彷悠徔恀怿怵恴徻彑忐復心復忾很忛悙念恚恢忸彽後彲徺忉徿忽彽忹恊徣悙徙悚怲徉悅律徟悒徎忥彽忶彵忀怛忑忽忈忖悏悆彸恚忟影彭态悚忯怢忠悝影徆怉忢悗恉徣恳彩彣徼律怢忦怋恭忙怷恮忡怊忪恟忀徆後徟怎徐忈忬彦悟怜徰忕恷怜怐怼怇忏忮忊忈忖忉怑徚怃恋彶恎徇忸徬怤彶忹恠彳怰忴恜忧徤忏恩彾徶徹忻怦彰怇恎怫恫徃忑彛徵彛悂恤徎忾彭徚徝往怃悂怼彾恘忯怠忢忍恥忧彗徳忱怵怓徦怠恱征志徟徭徤怈惙恛恡怳怫悄恜怵恾怮怴悐彨恆忓恳従怶恩徯怜怨怍悘恕征悐怎彾徐彡悐怉恆忬径徊怬忲忀态怩徚彈怸怞恁忠恅徣彆悍恙恞彦恃彄彑形廛彪彂御徒徫怩忽徊徆怪恀怿忄恥徫忦忲忼恰彎彲恔总怗性彫彽径徶忞忍恠恶怫徺彦忻彗彡徑怣忎忒怡微您忪徳徝応彯弿忍彑悃忣彴彇忲态彋忎忍徕怦性徫彥怕忡彭応弚忯恔忡怛悬怉怇志徟悽德悷怏從恉忧忡忘徂彬従徢忇彻彌径恕忡忞彾徨悚恳怮徶忡怠怩恀恃恡恠徲怮弰怦徇彾彫忼忼怜必從悜恑怼恺愂怗恑恋恑悄恭怘忝忱悻忄怔徑必悺悀悃弲怾彂怗徼悉彮悇往徬弤怣恗弒恬忡彈弾弸怘徦恔彯彪恤彍忀怸惆恫念息忋徤悢忼恲怓忪怫悭怮念恠怷怋彰徥徙恝息怊忘徤彋恔彞忎怬彣忁怤怅怘徾忛彖恱忟怋怎彦录忀悡忢悴徆恷彷忝怉忼彯徟忦恏恊恋忪忐彧彄彧恃徿怔恛怸悏彳忚徾徝徻恍忼彧彖怮徃彡彊忳悏急忙徇彏怾彮彘恽怍徏怊念忭弾恀彲怄悄忈弾怎怴徯忰弹忊微徳弴必彌悌归恛当忧徝忕徲徙彯徦徐怨恒徟循忍彮忁怷忍怅忄弯役忳彖彩念忾怊恤悀怞彵忛忀彘恆徣忠徽怪怫從忡怳彺忊忖後恖徧怷怼悀徾怮彁忠徰忯忲徰徹忁彰弿從怬忁悃恂彶怐徸忴怙怠忙弹怃怛忱怃怛徧彛彾徱弩弭忲御彔徚徛恤彗怳徚影悑彴恒彶徒徳怢忄恫応恬忶徐忈忼彡彼忉徤怓弫徻忔従必恁征彭弌恋怂徃忢徶忟恂弑忚徦怀彪恈忧悓忓徻怄徳徝恀恡徛恽忢态彜必彘忰忧彩怲徭彻彽忖徜忙徰徒忱悂徵徏怢怷怳悏御彩徉恸恈彖忕從悊徶彤恗恌恇恖彙患彳态徱悅总忹忾怺廜徰彷庞庱弤廻廤庑怗彡彼怚志恣怘弋彍悞悓恶总悈忯忋怿总忝恗悘悆忤怩徿悅忙徐彘恍怹恴忢徆恆忡恕徦忂忣恑復恵必怊恔徵彗徻恣徼忪徂徵恉悮很怅怂征彪徕忊征弄彄怬忸忚彡怉彻彸怼忏怶忡怬恚怚怦待悊徱忿徹恖悬徕恀悡悔徔悊徃快恀彺忎怡徶待徛忟忨恡恝恭恾恋徇徏彠恠悄悊往彶恇忊悄怯恁忎当息必恲徕悓怇恐忶恬恢幵幠形廻庢弎幅弥巻悇忖彧悇悒态恅彻忰怈怉念彛怕怺忼悋忶彖怰恪形忱怨怩忱徺怨怈彳怨彥徫恨彩徰恩恛悪恕忀怦恠怴忥恋志彨彅恣忍彘忮忆循恏怵悐恌悍徼徯彸怌悌彥徃怅忾彣待徬忲悕忢征恸态恆恬怽悕恘怷從彟恶彮怊悘恓怦恣怏恊怍恹急彆恖忼彪忹悛怋徑徭恑怖彽怊忤徯恣忨患恠徱怬得忸恞彰忈恘彇徦怠律徍徍恃忤怈怎徺弉怀忚廹忢径忕彘彶忏怈微忯律怌彿恀恃恛恘恋彘彧彮忌徣徜怏彩怐復循忯忰怄怎怸忪微怅恫怿彺彴怦恍怊忟徰徦弰彀徧徆彀忦庶廝廧徇徧微悇徹恆怊怠忏悍忏徚忖怶忎恫忯徾恋恎徾廽徂彜怴怽忨忭弖恱恝恘徃徑忲彧恈徢徻徎恒怎忊恥恮忦得徵怞恰恟悂忼忔恝恝忻'''

conv3_bias_shape = (16,)
conv3_bias = '''怡恏従忡弍彿廜彩忂很忁忛往忥忪忻'''

fc1_weight_shape = (64, 16)
fc1_weight = '''悝怕憖廥幓幮憇怟慊悄愕弞怊延恏惡惍幾彧忏忬徯廑库廑徺忛弋憏惐庙幯帶意従悒忎忢憅愩慱慬悀愓徎愾惦慲巟慵徤悜忮廧怙怸悄律庘情弦應怓彴愹忰怓恎悔慘恧弢彤悵惲幈慞廑惃愙愜帡恁愨悚懏惊废憈恙慨悋愚徽忋彬慸常惣慬愅愭憹惍怚忲忢惾惴弘彬悙恖惽帲当弩惪惇恋庱憲惹慑慟急幬帾廙忽徎惲微彤庲悔愎惕幬张惭懔懪恽巾嵷弑廼徕恀愤懤慟廲懌惤悜愡徝怕怴庥恟悿愯彾慠惻徐幒帪慐恼懍愙怒徦当憶帄悄弨慕懒幹忋悘愵慧徙恰惵弢恾懩憁忭忓懦庞惕幽怢惝怲恠弥徜憗惍愣廻幱庰废恤弌懌廟庂徨幔忚影强想彀悲惺忂往忼徫巯慍幤帴怐强怂懜應廟患憊慀悰态忿弨开惚彄心庛懣恿忲憛愣引引愢弜慙怿憟怑悺形恐彖巕幂廸悈廁徸恨愪徕廢弽徼恒庶憘弒悘彄弢愸彴廲庝惊徼廘怼恔廙憾慐慄惽強廀幨忧愷恑弼徢愠庇庑幻帧幣幬怑彺懰憿帵廑憑徟弹憗忿彟愁徐懀幥徾待悹帊憀憖慊庶弑怯巺恜幁年慠廻惲怕惸幢帚怲忮怀愳憀弅座弄幐懞幮惛怐幡忨忿庮幙徸慍弤惱愪彚廱弲忆徟嶇忤悐庣惭引弗懗弿慪懈悺忯廞帶惵帹彋愹恓恡怊弈怷愚徺庖庾帗巋怿憵庣帊恎恃庩幣惪愨恅悓库廊彞彽帵慍恛彠慪憷惾幬慗思怖惲得慿戊悡弶愸徬彅怺懨御帼忎忡慥弊年幔彸慞惊愸幺慻廈惰愅幞悩帼愲帤弡弭幀惯庂憒弡庩幊愁惠恤慲悤恕慱弁戣戁廌慞愌幛懬悽悉懆帀愕憼愌愭忾彬想愇慎悲悺彮怶惈惖惐庬幃帕弭幅惮彨慹怐徛幜弻懮帑庞悰恩帍廣幾帍彶怈庞憥怛怃慍徬悫得惯悸惓憘归恐恱庣怨徧帐幸懼幵悪徵恀憇愮恢彷慘悏憏怣憴庇慳弎彚悦幼悌幛府底慾忪悥廼庡徸废懒慔懮恛惠怼憴悋憹忁恨愐廭彠忨币惀幍廫庲忾怵异忺悑慥幫愌愴悊慸惗幄愍很悛徬弖彎懰懃懣惌弚庇弓忪憁怊徉怎悶慔憕恜怌忚性慩懍忈惭憃巳幸廐悧庳庍恆愣恌怄慚感恚恀庩惆愳廩怄恓怺幨弭恕惬彄愖怞忻怣慑廋愗庹幛愻憻常幖悠廞弗徻怛広庥徴彷弰幤徬帮归慜帯廾惫幛彞憱悼恿悋忢惞廋愣惛彏憻弼忠惑徑怴廤懓懅幖廰忳嶄惦怱弛巨弓悵慧慱幙怼恾想嶭懠愴巠庨帪惇慬弸廱廬忒怑愔悓憂懳怗恈怂幍弁庶恩憑康忛悩忆弶悷幁廴忓幽嵩憇弸怲慐弬憚忯忉恹怡忖徵憣愴廝嵤庚忐店忀庝忖彰悳庶怘彠恐庡怦庵帥庚憟廷幅彗帤悄愢徽慖慀廙忣帥惬崨廕嶥弪嶫怰憆恻恂床庆帋廂忖戈愽惙幜恆惼席彴怠徑懅慔惚怭弦彈徖彺帔懨悲庡慞戀愂廉巃庞慕悂幇彙庄慝巹慱庐帗廾庛彉憮役憡应弊廡幋慹幗庇慯席懐忄愛慥惟慴庘弼愸慞愶廿忋忹弄弯懐悮戂帣憺惤帗幽帘憔徰愊惛庢幨懤怓常庠懎彇忌懆幃慒弧弯庛弈愸忙悔幃悼愲幧忠怦慽庒忂嵍恴愞愩恽慎悃帒幒忚愬幕忇悻愅庀帽恨愁愺忆或惆幦徣愱惖惿忝怩恽忨慝彀庝弝弭怜悼弚彲庤康很惝忉御御懖怭幠廥岝怆慨戩愷忟幎悼恋怹怤慥惴忘怴'''

fc1_bias_shape = (64,)
fc1_bias = '''徶愍惰恪憍愰您帇弧憱徼徜惍彫愼徿恧惼愽庮庌懡忛惝懕忟庿庆憉愛想忩庞徼憀懌庪忙戇憞忳憑悋憂徼幭惜慸惔戆愤廞惔憧慞忣憣忍幙忾庝慝愅愒'''

fc2_weight_shape = (128, 64)
fc2_weight = '''悼悦徟彻悿愱悦惏廬惠徣悇愷弌愿悏怂悼惯怰弊徟恚怗恸態彷彎悒恿惠悤您弐愼恬忷惰怎慧恺恸彸忏徼恋彎徝惃恬惯弖悃怨慽怕恞徊彇彆彳律悷後弲弴惆恗悀徇怏彾引弨彏怖徘悗惒悗彭忀往悓徆性悯惖惞彐循悾徖异恚彛恊怱怒式徆悼怵惕忛徦忒怏悖忇役徹忔弁悅忿徬悀徲彜悀弹忟恝怱性悆恂惉徴悸弗弪徔徣彺惸惏德忄总忞恇彯徥怘恋惧惠弮恮怾张悈惻忥弉彙徃彈恪彠忥怣恽忲彍徨怇忈惾忸恻惉忎恩彠弞弸弴律恄恤悸异惼惱恶恃彭強恍悿慏愋或懇慐慔悢彤懂弛弉懵恸扲彏惉惼戂彊從抋悁慂愛忼悄惟憹懬惲恞怣弒憨批怈悲懮愳悲拂愖执忸恴戽懭扝拗抦彌捊惤意弩慌徂惣恱强慳愒憥弧徭彥思惔弗徙弄患弜忎惾得彽徑怹忧悱徖悝恻弡忸徣惘惍总待恊彗彛忖惰彡怷惢异引悫徭徝弗恚徔息恨弔弚彥忓後弎怐弎徳弪怕忡必彮忩彽惐悪惮怡式徝延悥彯徤恜怏彾惝廧悻恭彊强弛心忳怆忋弒役彷彿徼恤廝徇彭恧忓恃怃弰忑徒悭徘廓弾彽弪悄忣弛弘怃怚廾弘怼恳忻恼廑惋徬彗惂忄怔忣怫彯彊彷悋惿悁恠惗弟徃怫弶彗息怐彭悈弳惹心忰悓忸恌惜念恙形徭徛怚总恺恴悪彀怣彵彸悸弎彗怆悽徘悗必归悻患徂忾惚彮徛悛恋恰悙快惻恘徐悪恦怌恮异惷徝怺惢彭微惮怩德悠惸忞弖彊弢弳惵弣徍悸徃征惥形恑弒惲恡得恂徰当悬彋彮徂忇忒怯弩惽弩悙忯恓彔役悗怹徨彧徑徤恙彩恆怅從怶急廔忲恈恘彺恫怌怢征彘徺怺惩形弃悦得弋彮弌忼悺忓恙怲忳徯弱恩弣廕惨彷悄恣徠悄庼徯您徖彵悑忭徙待徴彠怇彇徙弮彘忻弈悓恕悦廩徴彸建恖悃忏惵忡恊惌惖彤彶必息怋怌徆惰恟徠彴弎怾恰悖忏惌彺恻悶忪強怽彟念忾惻恉怲恣怘惊惦悌忯応息弐怾恲彼徻怏引德惖弴弶彜恱恽彘弆惬彮惚怖怘愫悬徯忷待悢怹怅恒弈强弹恭愕悫悝彬惲彠录当恟弹怍惍悵廪忛惡忨怸弁恧怎悧怱怋徝忖弴必彍惪怈恩怮恕忕惇徣恫悐惠忘徾忚彻怙後惗悧忢悈惙惠徴怭弞弿恵很怖怡忛悤悗弩悅弻怱恷忨怐悍惏弒怄弽怓惌忉忁怴恩恕怷怞恵忭惙您忏惩徵恹廴徊惢悁怭弁惭恐彖悧後徎悵忊惄彮弉忲恞惱忒惩応張惀思恤弭怲弔怴彬徧异忬悁怬忁徂恔忍怢彁悁怀強彚彆恷忋廲心悒怋影怙彼彃弅悌恝彍恷忎弋怶恻弇怡彘忏得忤怺強恓悵怦彀弓怲廎惚徏忏恿惒惄彙惖悞怠弾弥弼恛彻悎恉悓恿悐惌彬弡悠惒忆徧彛彖怾弙惷忽弫忍徫当悮惝惥徝惕彛弻彗弹恦徟彍彛怇弄張律徙弟彲悉恑忎忚思忇張怶怾忞怶彵径悡徥忏弣彝徥恵御徝弰徘患悼悒徿弓怨怽従弑弱彔弌悳忨惪彞恖彸弟忋恙彎怺徼徧急忮彔恜惂怩忔彫惉恼徟悗弖恝彥悆悳彦悾恮彽恰惻忲怙悍悥怞徛恓惶恔愦徙弇惊怤彁怟悟彨愆恕悱忭恼总慂惣惷慲惢恕惒徻愔慌忌恽悕恿愸得悻惓恞忳恶怜恃惧弐恛愕性愀惷弮憣惥愎忶很恇恂徧忔愨悭悈彡徙怽彴徝弩廝恥态彥弼怙徼弼总恵徧当弍徘惒悈怪恫忮恟惋忴怚彨弘徐悫惜弚恓影徛彜徝徫弅怔开异悝彦忚廒彋復忪弮怀徢恳忤惉悛恆徢忌怍怰恈悷怐悊忹愅惢忷廓彻弔惣怩怾愢悰恃愋惄弢徨悉怠怺悊彙徚怅怣恎悧悈恰弮忶徻弛志復愛弟愓怳怫怶弒徃悮怓彨恦弤悾忋徶恗忼彏怐悧怿悳彝悵悮愫思恓惍怾忘徣從慷怤弰悌惫态惱怊徿悅彻忳慵怒恐慢彋弓徽徫慓悒怈徸弖徻怔怎恇惰愱怞怣彿怺惌悡怙愨怑恷憁弗徛憌忾徵憀彈恑從急愤忈慗悓悠怡恵怸异廯悀弾悌忏恌徔御悇恷恳弞惜惃復忄弳弙徑徟怢惎惢弝徾怓恪念怳怛忝恠彎弞弶悥恇怺惗悆徃忩徲悹悲怗廦忤惦彵悠悿徦惑彉怖徂彀恫惫恸惒弇恤惏患彦惚弥弜患惘復徠悏役忞恸惣怣悖怀恞悎快徨彷恝惐彸忐彵恊忓弳弳径彋忟恃惐彇忀态弄弻怋弩怑悍弑弗悙怖您怳悟怍悆徆徘弍彧恌恠徐惋徃悖弑廡徂惘徚恀怼彖悮忠急弬恐忉弒恋彯徺弒悛悚恂惘息悾弖徣悿徜弒忹怍怡廨彦徘悁怊弞忼徉怗悂悿忯恄徙悌愧怵忮怟惦弎忢彼忸徖态忑庳廼彜彘弥恁彎彑恷怺彴徢徐恳弣怗弋惢恛徭彯悒彰录悮彃忙怤悦弑恕恺怲悏悝怾恁弻怇忿彼惱忚悦弍忇怅廭弤忏徛忇怨彵彔怠惃悬怎廩当弯惀徂患惙惗恖徊惁恁悘惻忕忽忁悼怄恗恌恢悮忝忰弜怤恱悾彏忳弲忕恘彮弑彥忨怾怼惨弎徵弟忙恞惹徊悛很忸弒徯惠总悐忤忠怵惋惴惪忆恀弔悂彽惵懳憊愱愈怷徱形惛彜悾懿悾悲悸总戋憧弶悹戜悚悇戒悶弄忮憱怰戛恴怊彚懌戉弑悇惆惈律愂懊愲怒徱惭惭惛憇愌恹懑惖惨弈憀愖徖徰弿慿惻戏忤惔彾悂弆循悢志彵忪忐强悇彂怅思恍彞怵惙弶彳式彑徬恀想怃彜必悺徽徛彻徰态怴怰徕怩徔忔悍惧忩彄徖弬彈恢怏恗怴彐怭怌彂怮徕惺恅悎怏弘悻惙彲惬思惧徺忏彃弄悓当惓弫忹悄悼总悜悀忱弜恣怳悿悁恲忱怊彳怨弭忨志怀影弻忯怅恂惨径徊悏弗弳怅忪彽忶忓惡彆悺弎恤弸得惒急惠怓径惏徵弫惉恣悿性徙悜忭悶恛怊彽忱怓徘徠悵恨悾彉恩彅徐悅悇忽惞张弢弛惣您弡彝忽忡恁惐忯忼惥弣廸延彌弢後忬廭弆悛怩忬彞弣怀弋恾徹惃怶彝怈恀愒怣悝恍恖慙悻忴慆徬忱慑怦憚愩悡憰悉強惆怖恅惍悼徲弊廩悯徼恶愢徱怂感怉强徫慀忬愯忮恣惽徶惭惷怊惒懆惂惓快惘怘弱憈怮悮復惱悗惻恂惾忄廬弇怙恏徳忟恑悤忾惲张惽恼徺您怆彅彏忼恌征悭惃恤恭恿怴怤悁怿悥忕弫必惹恧徛弬悿忨忆恻怞徦悊徇忚弟弶恮彫彆徶悡弤徭弧弐恁徲弙您徭彍応悱忏彪恘弽徖悶悅恓徳徸弭恳忁弸弴徭弋张悩恶彼悯引怊怗弸恴总很怤彜忉忆悵惵徳徨悳怵恄忈恃恠惉忂彣怟彼弍怶怷徟忙惫忙忩悔怺态忻徳彺弜恥惗悾忓怢悦弸徒怕悏忛忱彃忬惵忴悎忡彨惏惊悝忆异彡弳彞恋彀徼恥忯弱彵惚惃悧怢怓引彦弯悾弪律徙惈悢悶弅弘彤怖怇彡异惪怷怏彊悷恐恺患廸悔徙怚弓怱徣您恏徫往往怺彮患恬彁彿弑惌廷悽弜惥従恮恹弅徊惵惣恧式彋弝彉恍悰徠恡怡彁悒怅怗彀忣弢彝忮彯弻忏悊忏弖恻快心忏怀彅弤徐恿彘彝得快忘徾廲惾徿弸式惹悵忻彬怸惓彤怛恓恜当恇恊惎弄悉忎彥悗恴恚惼恇弮彌徧惕忹徂忺怌怬怪忟惇彜忰惠悻弈惡忚悅徃情忿惔恾忤恕忲忾弈彴惄态想弿悓悔恓悡彘微忈性弁惋惍怴忍彁怠彚念弢廾恤悩弳悢弒惖恉悄弤恻恾彗復恡徻德惖恗彔惁忕悭廱悫徵弶彜忁徣怺悾彗悕恕悁怍悆彠悯徒当彥忸徒忁忕彑惝弩徝弣惍徱徭征弃弎弶彈彣悫恗忷悴惂怌性怡彖弫彡怼徐悺弄悶彰忷悏怫復待徊悘惏徶悮恡惏忽恔怭想惁惝悃惘徼怑弲恝惺弸恠惞恢徙御惷徾怞惮怗忒忮悛彇弸惺惸弐彣徸忯悡徢忬彙弝彑徛惞恖弿忣怗徾悁悴徙循怯忊怆弿悳怵彙忟弖恖悈忓恶悰惽恙徻忌悤惱忉悋徱怛弔惽录忘恵彐悒惉徠录惕忍悚彫彐悜弡徶徟徲怎恵忖弦彈恕恀徧惑彮悊悳惽怘恥忒彙惺彚怦忸悟恬彽彄怖忮忠悜彛徉性彅微恰快惔恹忀惦怍悸忬從弝弽怜忆惕恣惝徵怠彐循彔弃悈悕怘悐廪彅怺快彆恐廹忶悃惲忸恧恶怱徫忝廦忆忺弒悻廸恸悏怙惍忿徔恿忹恠悹性怜忑怦徧惂徥怠忤悺彪彾怕廰忩弒徸弰恟彶弯忛彯徴弴彎彃怅恷徻従忣弳怄弒徕弦恹忛想徆恚悞惭彂惍悲徦弈彶怀息悛恏恃怶怿彞怂惦悓彿悼恅恃怆忐惜惛惬忡徚彗悦弦弯忑悚惊德弿忦弯想徎惝悜忎引惷彀惯惯徆徫弊强弤弆恵恣怵怈恓惢恌忂怪忸引徨忆恕怠惫恹役忩悓弪悜徉彷悄悗彤惺徯惄恁悍彆彀恌惮徺弓惴彬彅思恃忥影徸录惏怈彴惀弰恮患悟惏怸惆弞怬惏惥恐彔弱悾忺從徔想惓恈惷惑怏忟怰怯彏惲怎從忰悋徽惘彂忶恜徑愌彉悡恤徤愻怪彑怩徧彛悎忤怘惋悤徣恻恱悩彈恞惐惩徨怙徯异弳悌怏悞怈惑惱忋忢怆悱忰恅怋悁忋忨彏彇彎弖忳弲彔悁恼惿徝弗恝悛忢徘恱徯徢恄惯惛廷怔恿怬弗性怛惰弊很徇徔怲忶恋悤待彳惌悎弼怟怶悉恙得恏惯徻怠廡忽復恌弗惏忿惡彈徸怼惿恍怚彎悴很惞忉徧怂徨总徖恴徊恺彎恩徬悂恉怏徍廥怒徫弆悧得怲廝恛惨微建忘悞想弗弁忌彟弓悐态彍弹忠忼悬徉患彺悳徰强惥惔徍悲恿徭惔怛怇彣徲怤怩弢徂惬悞恊彛恀彤惯徯後恣悱忿怓恣弇彯思惕忦忏惷忤徫悶忄忦徧怢忙徟忩悓悼弁忒徿彷怇徉弝恿悀形怲忢役悸悦徃忲弁忷怗悻恌悂怈彈弁弟徟惘悺弅彔忟悻怯徧悟怜徱悺彵忱悿彊惿怎弌径悗後恇怪恱彋弉弥徂弄怗徹惛恎怆恝怦徧恃恂弧徲怋彙弫忭愀怹悼恣悯悜怼悙恸悝惦慹忳悝徉恰惞悍彴怪彵慆恏怜怿恸恞彊怯愌慍弿悴惃忭彲怘惖怮恾恪愡怐慑忰惥录徹慙徘恷怠忹忹弽怼弜弎怃忋怡怕忠惏徧徾忾恧形忛悡惣忭惓怤弛忳弟急廼廰忪悡從徶怲廨恛忑悗張徾忓惱忙忝患悏忕悸廨悽彥忍怅怿徻忻悰弘悃彲彠弩怇微愬慛弽惨念怍後往恺徏弭怋惐愛彥徲恽恋惻彬愴彞必惕彳恃徶悷恼悂怣忪恃悲愥恦徸悺憣总憳愐憽怬悅惒慸慯怤憆悪惞您憫彍悅徨徵彬怍慄心惡志忤徏忕悏惺惏形怽愲彖悪憱恅惔悐怳恝怬弼弊慔彧愦憞彟惿弙怢怎往彟怈律恃怪忰愧总悕彛慭愞恻忂恇徑忣恔憢惊彬惩恱愧怔息悪怶悟惯愗怃惷彘彋怍弾怬弾忱惁弅惊恭惺徍惢忾彎惦徽愓彎徣忁悁恬愬怗忁您彀很惇恳彏徿恴忴徏恜悕总悥愜恰悇恚怲惥悂彠惸惏悻惻徒惜忧徥愄怔廽徻恾恱恁怞忏彯怵忏忩弾怇徯怪怠忷彔恞弖怕怅悮彨彮悰怔悾彬廿悈惱惌強忡徖恗忐惀忩悀怼愹徊廵廾弒弹径彯悃忺悞怒恄怀悴征惌恷悏弪忖弲悇怄弰悪当恡廣忟息悙怂忢德异悡怛彙悦悕恹悒彛惝廽忥徳恻悂归恹忷恪恙恋悬怡弎弬急悋悰怎弘徟怜怷彘归彼強惷怋廱急弇徧弹彥忻彥徻徤怞彳影弝徫弄悈怱恱復徳怑悺恮惺思復廧思彰恙徥徆恳恮忉悳彗弲彍忡忍恆弊徦式息恷恸怮惱征彾彠惃怤惓弱悑忥廸惐惵弙怪恲恔忙悫怗恼徸悬忸弻悸念徃惣惭怺悜従废徍徶怑御徾彵忑悱徝恼归悒悊徵後廂彊惼彀徱忋惃恴弍徲庾彲彉弘忝悡当役悫徚怪悈廨徖彐心彯弈弋弪怅忤徑恊悻忮怍忧怾恪悍悋忨徿恴怽怤彲後忥忁恿恜忪悗惊悶忞忰徶恶忔必恣悆彵弰忺弗悖恜弒悚恡悂悖惒怆弈弶徏徻忪徏影恣恠怯惎彾弶怟恝悼弑彩徸怩忟彻廴悧忻悹彄恅彘忑徳悓愀恂强怎徱悉忝忳弌恂徃惡徭悌怖弖怇恸恛弉惕怙弿惾恎弫彞怲悟弭惂忨徰弲弑悙悔惕弋弍恕徚悍惎恗彶式弦怘惻弽忎征惔性惄弄忾志引徏惌恣彸從忟怱恜忢悒弅徍徍恎微弪忏怋忩徵弘忡怈恢忔忻忘弽建悡惤微恱忣怈忥忂徲悏徂惎惀徱忪忁恐悎悘弎忇徚廻弻徍恬彏忲德惈悒悫徦徹恺悝怽悠悴怤恓彗恳式怌恽彣惌惗恆忘恜彥彖悇廹恦彻惒忽弬徝忌悋悶惕弹惖惄悆怩怾忁悦恣恣惴怏惙悀彥忺徝彭弊惞悹徃廷弸弌惼悷役怀怵愖彖彸徘忖恣惯恦悩怞恱悒弲徹悄彈惨悁彖彔悟惍弰怉恝弣恶悦徸徠恻悴惘惄惔惄徊恀悁怲彿怪彪惂悯徳弽弔忐徻惟徍恔忪徶弸悏德悵怠悬恻忿恻弢恵恻悜悼悅惵弎恱弼廕廢彂廣悛待悯恛怔微恱怸忘弭忢廦急恈徱惇怱惃式忐恧怗待悈念徺惲徧忑恻弆忎弯怦怟庠恌弪彥待恷徂怩悳恐悛悎悋彥怡徛惧徛悮恣忤恳惮廛役彊悸恋悫怏忘忌恊恢廣徳悊彚彴徔彠徱忆廻怔悘怜弨忠惇很惑忮弲恶怄恱弌恛忔忬恖悿怵廱恂恝弹惉忤弛恶悈忺徸忏忶悿忱忽念强惌弚悊忡怀忬忧恗态怬怖徉徳徰忔快患忑怪慾忻悉忽惩徆愃忾忺恾悊弚弍愝惑忩恩弊恉彡怄弅慐惔悺怇忕徽徦彷惚忼意恑怶惪徴怤悔弾彐忈彩徫惥弈悺忰徑忇廞後弥廛恽徐彾弉怖情悗弹恊恛往徐庿怷恛归悰愀引恵廓弚惹彔忪彊患忐忦忒恱怹弲怇悸廍恱彚恘復徢徔怱悞悝廘恈廯忁徫恱恈悷惯弿忞恾弫廔异忥悥弦彏廠彾必忙悔悙弶恆弩悂惨廚徚廼悻惇息徉当徟弔弼徿恗您惏徧忀怔怷怘惄弪廴怢悱悦悙怫悶悉忈廦影怚怇恹恡恷惏庒徨徭彩恢弝悭恉忦恅慵恵怩惜悠悆忀悐悖急徵悴惐怓愗悺徎愧情弒愌惍惈惋往彁徬愂息忌彻悖悓惟愕恁恵惎怫微怬彡忘惬忔悼愠忁慟徶忲悃惮悒悸愋悴恖弋怕恨惮恹彟張忁徧徧惽恨彩怗惝惡彯悟惪彽弍徠彦徐忑惎忥忞彟恆恠弓惡弇怶徣徙怲彠徤怋情徠恞弑怎彖弬彴彐惰弹惷惉忯恒怗恓惣恠彤悎彫彖徶悘式忆忨弮悓悽惃彊恬悟惜彇徤悛恖待惒徖惻彊弨徖悊思忈弬息惤彺必悒征惈恕恧忁惿惐徣恴异总徃忥徆惫悑弗悧惾忚徆惵恚徹弓彄彿恼彰弓忶怎恿恴彚录悺惸態恄怣惷慀循弝悺怢恺恅惤怉忶愛恷慜徾恜憏徖慄惯悊恚恑恙慅恱彎彰想惣慺惬徎惮忉彩慫応憉悷彘恚恺悲愕怭惃徾愴恭廴慩惛徔恁弨惱怞悐彐彫怨弝忰忑弾惱彪忬惡怟恧徇恓怫恕忿怖恬彈彦弟悆徨恌惆恇怬怭弴悑怞恉怅悠惃怴怒彿思恛悝恖忏忭怖徕弉悔忀恅恀恨彧悅彫悋悕忴惙弥彣従惾恢悲忯怑徠怀怖悴怳弲忯愇忼徫忺愒慠愙彩徭忖得恴恺彏徬恆怚态愁徸徴怲惟徱怿惉忍情悟惠愅悝彖恵惕忋悮悚悜惒慂愴惆彨愐徦异惴恹徳惮徶彪張悎悂怓怖彗彷弢彭恧徃惞惚待怐忤彉徔彮悵忐惟忳忮悞弾徹志張惩息怘恙彅怷惟忴恁悠循忇怄彙忴怄悄弾廵恂恏开惮彽恠弄徊录忂忐形恜恝恍思慗慕忓慉愸悕弰恺態弼忣悈徉恁愎愒怄愁恏悙愧忛惤悿忭強怍恺慫愳惋御恷惸怽志慂恧惗意怀慴悼惁恽惐悅愽愘怫怍憕惺悌弆悡徢恴彿惯怜徤復弣惇怓怨忒弾彾彀徤恷怉恌惕彫弈恕恫弍徠忏徑怏惴怑弚律忶忯恗悅怓彸恪怃忐悳恏彷录怉徯彦怙形悓彬怇悾彑弔忪忩录怪悓恉惰怛忇忿忿怲彗恮彞快惎微彬徊恐惫徣忯惻悎忠忩徯忁惐惽彉忆怉彝徨弑怭悜彰彛恆悹徑征恪忷弤怳忁惛很彤恻徻忷彘悉怽悢忳弹恰惱惿德惣律忙忡恧惹彑弻徍彶彶怳廫悪廯忼悜忬彑恎悰廰惬恥怟怒彼徘恉廔徿恗弝恏恉悴怞忁悮弔悶悩忾形忼恼彔恡怜怂恃忼廢恔恪廩悁悢恧形悲悶悛怫弗忬怀忰张悭彅忤復怯廵怮彊弯忊恺怿怲惢悄弳惉怏悳恄弥忒彤弶张恎恕弣怔彁恁弮怋患悕彧怢弉忉弬怢彤惻恙惁弌彿悂忪弁怡彣悬弯弃心怹必忮恼惬惪彜彏忪悔弡悱彐悁徆廌徉悩徫怙待弤廸恚徝惋徳彀怩忷怤悑怇恇徾廊彞怎恛悭弰徍怛廪怚忪悘悭弘怅彨彤忹悓彪怉恌忓応徂忦恊悤悥悤忿悡必形彟弔弔彷惏彣怢廾形惼弒弚恢怕廜弰彉悖惏悭怸悸徧彋忏怞恀惆徇彥怎徢従悘悛恉忝廼往徿恔怜弯悞恪弯怋思徠彮悞彰怩悿忚彺御彈忔形忆悍怰惀彆恑廉悊恃忌开弉怤悢弄弍怓悅忟怜弋怽恺彩悲弩彔忽怗悏弐悫彽恆悞怚恿律怰微怯怇性恥悘怈悮弹廠悋徧忆怀待弖录廎忀弿怖怠弪弓忳惑恸忾恡彜悗恝律怹恻徑忶弤恟怠怅悰彸徸忍弈愄惝彂悐弆悶怺怒怆彙惔怗恓恉弗怗愇很志惵惃恡彫恤悫恰彧悯惱愈彳悍徤惵悜徨恧惴惍录当徙弘态恢悪彪恾怍悢悓怇往弩惩您忾愠徳惓惂恼惡怲忷憙很悤怬忓愅恍応怾憜态悒恟弿怿愭徵怡徛恒忊憔忏徽彻惨悱弉徎悽悂忩恅愹憱彌弭惎憱快憲慢惞恢愇愞惧忁惩怡彗弫憈恩愅悉怡彽惣意彾恚弮弤恗彁弶悧恈愶弆忣彨徖恕彿恞怠恗忰忢徶弶惍徐待怶怏恜慌忯弸徠恖愡忞怷想忬悍恸徺怴形悟忒惩忝慅心悐悧彲必心徼悺恢恭影恴忾彫息悄怽弅情怔恧徔弩总悓彛徘徺弎悲忢弱悬恫恆归彚弊弿忧彯弜弩快弜怊怤悛彃彣忸徦恏心异惠彪必态徊待怱惧怹形恲彝役异惖惶惗怬惤弄惟慼恋惼慶愴弒怾悔愲悒慰悒恓忈怷惁怠忥怗恄惩悑愫廊從惄慡快愾恜忖徱恝恐徫惿恨慰惶悽忷慤忦惋忌慯悏恵忏愀徱惻怖悃愰悞总律怯惒悫悵恣怦悎廒怇悻徏恶忛徢弯恎怼忹彿恿怚徤廞恮忚悋弛怚弸恫忩忳彼徍彦态弘当悂廔彭忐徛徥悿恸度怚忄彃後徝恩彁悥悠忍彨忆忑徑怃忴悸惭復廨徵彲悕惡忞惴归悮悕恞怔惁您怠恟忓必弙弳怏恙恖徝恸惏徃惻後悳忒徠恮惣怜徼快弞形怚張悖怈徳弓惜忻忌忼惐恑弐忨悒忤徣惋彜徤恟徃彦悳弰怘弮彫弥怴很恟怯恪强廄怎怎弶徚徵恽忿廞徲忔恜怺恙悷悔彗徴弱徝恴廍悪怤弑悝廮弱怦忯廸恩廀徘恨怾德怉志弛开弫悎惪怃忛弡弿悧庹忐怤忿悮悦怋弓慝恷彗快愀彩怢强恾怮忘怸徂徳彳彇愱惖惶息念悐怑從忾恱徧惈悂惤忱彠悁徨徫悼徻愳惻怴慜怫息惍弜忣愯惣慒悫忯怵徉慹怂怒恝弨恲怳悵怃忋忰悛悘弧廨怷影徛怘忲悏惷廱恚悬徥徆怰弌怅彋弬怷恬徟怇怰悲恕徊悀忓恆彤彆恳惤悾恺廠彏延彆徥忞很徖悖忭彩徎往応廥恪弓徆怆彭怵忻悇従悊弨憃彷強怵念惴恷弌惢悲惨愷忑悅彻忘恹愂恵怇怺悙恎怂彛恤彍悡愴忹愑怂怬忘惕怓彛怭愕忀憯愚忒彞引悚慰徫憸忥心恗愢愓彩惎彺応彥弲愆恗悤弫慖悴愧愨愚愘惽彑愧影怒徿恠忯彄徆悳徙怃忼憎廯徊怮廸异忋愄怷悲恁悗悗恾愥恗怌悺恦恰恆恱怷徰怟忀恦慆忧慹怬慁恌悝惯慫恐忾恦悕忔恷悋怒快弨弁徰忙悩怐恌恒惵悛徛惝恝恠忑录徾恪恲患忔惷弭忬悦录怵怳弩惱惪忪徊彣惆悽念惇怊徍惾怖悾怑徥恒怑彷怷惇忍弍忽彪恃彐弎忝恶惗弑從恞弔忬忁怮忆忋怇怀弩忩忇悔忋弊彜従怭悧彘徔徹悱悟弥彽悳怭悕忯彲微性彿徠悛必惬怂怷惦悰忿惥彎忄怱忴徎恀惣忭彇彥思徚恨徔弲怼徫弖恄彎恭惱弶忼徴彂恀彤忥形彧忷惉弥悁弜忑怡忎悎恒悭当悸急怚彿恨忣忨恚悥恨忲忄忑弑弢徣徃忼徤忏弳惝悈怓忖彼恢彺彗悏怄御悦忢弊徐怸恨径恥弘往待復悜怶彧忯悌恼怈徵弝怛怇弹彍徐忳惌怽弜廩彷彍惐恶怜怬彁怅怟忿悁彷弧悵徝式恓怍患忂总廳彛恒悤怠彂彾恚悸徦悚彇弍恧徊彙徾弻徛弼引惼憁惥忏悄愦想悾廥懝忳恑恉恦慾忛慧怮憨忯惒恬徕慎成忕惷惛恿悃恮恕悄彂惩忬怅慞慱懜弿戀惥憖怕弎惷感悜憕悴恾恅惤憠徱感悕悛忻応憿忈怡弤弛忋惃廡悡忚悽忔弐忎忋悬弒心弯悕当怍恌弮後恛忨恨悊忭惖弳彉恦忼弩惰恌怏弚悞徛廽怅徎弉弪彖悙忖忕忎惑归悙惛徳惑忙弾忉徹悙悻怒彙惐念憋怜怜恂悺恺彜怶愞恗忱怍恻惴忢怮忐慊忤恇愥彽怖慜徨怬恶忭忖惥恥忒弆悾慮恭悌恅愽弳憉愚恊性弟惲恌怅恴恽悉憳怨慱悸態徉忬彻彰惩愞慦彗微忰悵怿恉彋弶徊忱恈恲恋弴悤懐悑悴恱恩怒彇忭恧彨思彨廢归彗彍彡徚徙恇悌彽愩恩恹弈弖悎恂恫惛忴恽惣弴怂彀恖念彍悦徑恧怟忉怂惐彥异彏慥惠恌恟怶怒惋忆悌徙弚愊怐惙忞忹愛怇忋影恒弭惧悧惠弴弁悶愘惘忪征徛忕忱徊彰憯愈怀想恛憷怞悃恰快慩慭愹徜悡忧怨彪慹愷悵惎弰惢愆恽恾悛弾徚强惌忠忆彶恠徬徤彲恎徴恺悹忞忴恣惍惛怣惤忰弅悜彝怀怕惈悩忡恅恤惌徕恃忂怕恒很弾悡弖恖彮忬彨惁弸惓彶恜忹徆彎弦徒恸彈必恼恴恧惎德惂思応惎彧廞彌恐徟恼弦惪憍從弜怑悷恄悭忴态徬彚徴怔怂忦忆忨惽彟愜忙怣恆彮彝忤怨彺怀弧彔忏怋愦悚悚悤悅愽御怌怇悋徛忐忑愚悄恱恝悭怉忎御廻归弶怃廽彬惤彈弨忆悲恙弪弈悫息後廤弳恘弼彚忎恌恒從弝怽彄忼恘御恐忰彴弚悌彉恦弨怴怱弸必忊廫悥徵徉征惵恊廔彪惌忤怬悻廪怋怉惓怮恳弤恋惀形恈怈恶怾彂弥憫徎弚徵必恄彶弓弩廮式恻強忸弎悉忆彟弲恖忴彳愉恟悭录彾悶怆忇恥彏忘忻患怨恦恖总彍强忏悆彜愂彦彀恒忣弓弇彰怼彵惢悬惉忀彵怨惌忽惜弌忤彸惎弅忧恳從念徉徖弼悟忠恊弲彇恩惯恨徙徸弫彑忛悖弎徊忏忛徯忆弸従徉彔忸怙彑态悴彠悦弡悦心恢惻恄怞恤愰応惱憰怫慤悕彼悴徃惘慃惿慔忔恀忼慉德彭悌怅忹慢愍忭念愬惾忩従律必懅愶徘怽愄愆彙愦恇愛惞怦愔惈憯慹怶怑慆憎性当忱性彮徔弔慦慕憂式弊怴彀惹恷忒忪忛悓彁弨忈恡徝忋彳忇惣忠忉弰当异弓怛怡恛弰忇彔弡怚徭忕怘怋弁恓怘彝惩恭彋弦忡悇怇恛忻悙徙悛恄悈悎怐弋忾恧录彈影恭恧惋徧忢怠恳弡惿悽怦情弃悦惷從徒彁忀径惒恅律弫忎張怱弇彝廎徐忲怴悡恕忁徚惽徵廵後彷悡恖廔恩忽彰怮忱开忀弝怮恮廁復悺怣弯恞徭忨惃忡彑恌恱忓彥徯悷徒彠恀恶怄徭忼徛弫忯恥強忶怴悶愗恦弘忄弸悦悑怽悾忍彀惷弄恹惬彜怘悿恇彲徴徎性弝徒恿弬弼往怤怏弰怷彠弉忴悙徥悞忷悼応恈惢悗彀忋怌恰惕庬愱忙悱慈徤悒怪得患怆恇悝悃德彗性往悾彔悄忺愊怟怂怠恍徠怢徤恳悙怬後怲您愄弟恘徻悠悩愲怜恆忴徙弙徟役忍惰弔恤惋恍彃怬従悄怌彵弿悝徍彧惚弽弫徣悅悩怂志恏彊彗徨忧忇廭徤惀徦忀恄德怨悽情彭徍悘惜応延悴悿忏徰弔応忱悬忷惘悐悴怿恬弅弉恁徧怆弤徘廷惥彞悞悄彸彲惈惂惄惷彎惁怦彤悋忦念悿强惿怩悝張弔惴徼恆怫恬徴彞悳忈悢弉恓彭恿弢怅徙彸忭徙式怲恕恵忮徶怉悰弦彀徤彲恇忖弔徘怓悳忯惫怦忏徨恸怭恆悟忧恋從復彐彙悶恹彌悺惘弈徆彤惋忊彔恲恁悺御悓形忶廽怉弆惮悝従張弘式悱徎悪惖悎怘弑弘恠彝弑悅悲怾廼徂弭悍悟恡徂怺役悘悡恦弜徛怕悖悱惵恪彉彂惌悔弟愞悢忢徏徣怱愑情彦惬弉待惞忒弩彏慕忍従惜惜弥悘彫彉悫愦忏忡恹悲悕忰怶惈忼悓悂悱怠悜忘忱恟徚悱徾愁忛惵恂悕恚復弼悤恴恮徶怐怬徣怨怑弪弾彾归彬忀忻徣惗惓恘惏弻弴弊恹弬忟忉彶怸徙忒彡微悿弴悇惒忠弲彌恒弙徼怚恳徱惦弆怕悊彞惌徑徚彦惰恉律悗忝彤患弈怛彷彬弼悦彣惁恚忺廗彖徬悖怑当彷惬恚廧徥彑恌愞弸怊恾彫忚怈徝彪悻忩忴彘悯恓彞怿廻怪徠徉怰弶忷惁忌弓彬怏忺往恕怪怌惐悭徯恨恡彌怋怭循惯忢忟弅恁悍惡弩悰息怬悪待徆怆惤恎急徿惊怦惷怙惓恶悟恹弮悦惏惁弸惩惦忬想惶彜彽彣悾怵弟忦惪忩恂彁惾復恣彁張弘彳惴徴恂御悥弰恢征弶怋患彖惻悀惩怓怡忾忲徳慘怾惄彉忾弃悫忛惨恇愠弦悧徇彊強彫弅悕惸徝彾愣恶忥彃徟惊怗怽征彋怫悛徆怑徳恚怔悝彌忱悥悋彻恄忱弄彉弄悙廨怭惉彖悝恴弻弪彯很悬怇恼怩彔得廩恠惄恧忳徦惠忑悙弚怣廗悵怿怐徴惍彃恴怪弧恊彅徚怽従徨录彜悹恉徸徸徾悼恼忙徦悃悖弐徾彑彜怺张忚惤弣恇徎悎彬弾悻悽惔弉怊弴彨彝念悄怕怍恡忮忘弑恷惹怭忐彍径悔悗恕惴彥彼徭怫悚开徂怘怴彾恁徱悊忁怀徔怼恈徘恥徠归形弡徢彞怓弌弇惎彜弗弈忄廽廠悜忾従悼总怔弲惃弄恨廚彨悝彤忧廢惤怔復彔情徯恍忀彴廸恭怬廦悐忤惟恤恛悋彟惂徛弧往徝弈徘恘悺悻悕悫徰怿怺弮従彻忏廼廜徖情弮引惎弐悳弱忳恧徝征律恵忱悸弇恽怼惃弇彘恗惸惿彘忁弃恠怵彧恭悭恙弙彀悘惊忡彁弙怅惠忢悮惯惷徕悀恦徭弥悕恖得徚忶弅忒怎悝怼悗徺弎忛憂徰彽愿愖戴忁彏惬惚忒愫惗悰幟慞愅懯张忠怷忯惨惑彑惍徶惞懐愢恅忡弟慽怭得弈憘恻惇惎愌慉惠彐拒悑悵慝抁彰掭悗懨悭惿怺忍廷彂怾慏挾怇廄恦怷徸彺恴忽恪忞忟恀怡怿怢忿忏悃悗惯惹廾悼忉彷恽怢恜悭异徦忓彤惴廊怛徭彤彩恿总恌恿怷怩恟开怊怿恒徺徂庶弇忂弡張廪彖怘怚彫恞恆弯忶弿徠弐復影惁彗徏徨惥恢忂怊恉彉忛得徧彺彎惿徏心徚恞徢廱悜惕彏惗惴忿廸恼忛怽恤怼怛悗情悽彿怵恶惇怜忊悻彚徔惖忹忍怲恎廬怿怕惈弇彟悼憎忾懃憙悄彬廬恷怕恪慿弞慘恷恴惕愷情惈恭悡惡懑念彻従懸悰懹彗恚彯悒慨悎態怪憨惷恜憲憄忊惵愡懜悺懇憋惙懷憊憙弻恍徜悆彔忖懲慡恄彀恓彛恀忎恔恾弢彔惝忾恭徸惻息惿恎惁忩徜恔彼怠徬惢彩恩恰忭恎惘恘怊応徫惜彧往总悁惫悷惌徝忻怔惆忦惘徆恠弥忙忦彜忾恡张彰恔忩惔愆忊'''

fc2_bias_shape = (128,)
fc2_bias = '''愝弄弲拟恏悰弘忧悑弇愨彉弯彃忂愰忖慃愕建忻忥怨弢懧怷影徫懡恌忎弣恼忚忘彈弟忝徒弅忶愶彾忕忢怑愎彿怷愺惸惖忦忆恑彁弮彩形弆怎恒惮怡必恂得彍恨怑慅怅憨弞徒忙怕念怤恞悠懊愢悓恸悀怳悀慮悘愶愖怞彺忨徉懊悓您惟憬弮悔恋忢恌恱忢惐怦慵応張彟慦怤忘彀怰忒彺忽忰懛悔徟懮惌'''

fc3_weight_shape = (50, 128)
fc3_weight = '''悙彽徵惽彣忂恧忁忥怜患悀忥忏彛悰悄恷惼忉彯悯必忳怽徇徴彫愰总律徎忡忂悦彺彯恔往悑恭惌徣怊怪彮悢徨怊忬恎悳彽悪怙悚彐忣怫悪徬怉惎念悕志怶彔恦徖愢悒愢息徦悰忮忐悛徳恆惃慄悗惣弾忐徬恸惠恘怔悎性彟忳彪復恘悇愂怂您怣恑彬愙忐怾怩惒従忋忤悋忩悠忠恛怡彐忿总彣悩征悄悛怌忀恫怋恘怬恢恋怛忛悞恈怆後恉惊弄恤恃忘悮徳彯忬恒彽悳忡恡忑怙恭悋息忤怰忽悑忓悂必恨怰彏念悟忇彎徰必悺忛怆恔悃怿怍恐恐悙彬悈怲怏怫恛彿悈徳彋惛恜惔徖徻怹徹悠徻怂怭惚恒恬怿愭彿恥怆惗悷恖悖怂悗怣彪悕忂律悟忞彽忍恪德忰律恼忳忼怈影形徰彦忆彧徺彋悓徉循愝徶怢悆忛復彘悲怴彁恧忓恹彪怤忑忇恂恈徹彜忼徸徽徥彖廢恟恞御彾悖悇忬忢恙忦当彥徻怐彩徐恭悑恟忔怭忳徧徧廼忹徙応廻徍忼徑弙弼悙态忣徛怫怿弛忕徜异彋忆弨彔忡忠彉念恄怫恂怔忘徐弙徢弬忔彖征悱彩廬怼彔忦悁忡徜恮廉彰怀彨开恴徍彄忙徽徢彘彫忿循怨怜彑御恤忣徜忺彧心弫怎徹忇恥徬彷忀復忓巬怸怿彔忺忠徉彺徆性彫忸彉恂忿忈彯従弴怫徉忳彳忩彷廩怠忿忸弶徔弢徨怭彬恣徂彣弐悎彦忆怈弻强廻徎彫怏忇彘怨彀徇徿徴徑彚忷怑悍怢怅怠悖彙悴忩恰怒恊彶彯彰彁恐彑弆廳彈徹怫庨徫徴怗恃廦恤悏彞恥彺御怯弌怼忠总忻従徃怇廭恅弡必徐律彙怔当律彔怸忒恃悜怣悏廚忷悖徎弉弸徢彝巧得恥悤悰恦忣徭忎復恿忰怞彝恙彵恑徲忚恚怲彗忣彑怱彐怂悙怄弶恬徺忿忈恑徘怄悭忩忍恍徹态怪彳怍怱怦弄恢忮怹忏悇徬忻弰恙忑恝彐弄惉忳彣恆忮怑恧徾悓悍徱悫徲怗恟彽忶忺怞弨徣怨彯性忼彜彷悲彠恗彦忽強彸彔怦怈徍徦徴忒性怑忬彾忷徐彫忔忘恌忙徆彾恋悇悒急忡弾怩怑廻忖影忈愙彁恀忮怏忘悀恇径忦徼恮惹徾恚怃怦怩忘悌彘愃怐录恅悄忢忟彬怀径快怲径怎徦彡徔愋悮忲怍悯恡忢悡愓态恇徬悋徒怆徬徯悜怐彛怢怰悿忀恲徢忑悪律怘怢惕怤恑怮徵徑悷悐悡怠恗态惒怩怋怳惭恒总悲怭恀忂怌悠徭悼悔愀彘悽怯忪徧恅忍怹怤悦悗徃悧恁彼恨恾悌恟忥忨悕彩忨彨惵悏怙忰恰忭忲悖悍怸徱恔徵念弚彎忖忍役御心悈怅彎彝徸徶徽忺徜悑徝悛彽彂怽徫徲忙徇悖彟恫怢忖当徚怽恪彅怑廷忲恮怘怫恿忔忚悠愱怳恱徳徭悸怪徑怶徱恢恆忡徻徔恅彗徵忒恲循很恑恚怄怟悔從彭忪怵怠忼志徤徒悉怚庹恍忟弸怰徭徲息彝徳惺忽忶悿悐恰彧怐悸得性怑恷彚徼徇待彝循徫惠怮弛恖彏忕怡忡彯恜悅悩徇徆恍後彠強忐忌廭悚彔怮忰徱彛怀怢恀廊徔怊徝徬恨总悜彾当往忟恋忏待從徭恠忲恔従怩忍弿待徜恽怣彣恥庭徊廡忆弭悌弞忳悈忍忂怙廯御忋恜彗徉忷忒怲徠怼廊态徕廗徽恌彍弥彭怏怤忝徔怉徳怸徾怰忯律忯怐徇怲彖心彭怃德廾忽怌恟廷悏忴怼徬弲怤怣恠怅恀怸徇怳弾徇彑师惁恓悯彷彿忋恙恾忞忬彲弲恤忟忒彌形徏彛徖廖恘忮恺彛彸怇徆彯弻弣悂径役态悬怯彥悙恟悮悞徎彠彬彮徣弲彫彭恙徻彰徜忄律怌悊忒忒徜怆您徊彽悗弇怹廉志恼忔忢忊廭忰弹彮怈彫徳影悭徬徉怅彃徧心循悘恘恗律怍忟忥悌性弒循忤廠恪弯従彸忣怕息徚忛忔怖徇彖彫恨恀怠後忐往弖徲怲忥彫悏忄忛忞忪怀恸徣徉悢忭悅怫怹彽徆怎归忸忧恂悤德急忎恒恊恆怦怅徠怿徤怛怵恉怡徂忎怴忒忡怾忸忉徆怖忝忲忦径忶怨彛恛德徒彆忘忼恨怐怷忿徸彤怛忋恘恳怹悖彻怐恚忂恕怊彫怑忄廬忙怶徣忖您忰御怽忝徿彿彙悑忒悴彔悒徺怎恨忆恽恺彖悂徤彥徱急悐恘忷怳徳怈弯怨恜怴忞怡徜悒忑怇忮悏忭恸恅悢徳恤悌徧恆彸忶恪必悫惉忡惎忮悈惪怳忩悩怛怯恈彠恤恅怛徸彎怶悰恰徟怣忹恍恪忇恍悻怲悺恞怠忍忨悗归彩悷怫悮徕忎惋忱恾怽彧怊恖悓恏恟悩悲恦怏徯悯恍恿怣怦悰恪怬怷彮忯悓怭惓恇彷怆徽悦怽怇徔悁悞悜怜後怍怶悠怩怣彦恃徍徧忐惃徑恛往您怚徺得彗忱悳患惱悟彠怈患忇彷忒悓怴忯循悦怋忤怡忎忛彽忿忰得影徕恟怃忌悤徒恍怰悛怋性恁徹徻怔怑徺忳恧彏徃彬徢従恺徦弙怲忴怅彲彍恦御惍当恇怼怗形怏怟悚彏忒悦復彬忧徂悩悂忽彍忚忡忚恼怘忭徣怽怮怑忍怑彛忙恶快徃忙彰忷归怑恻徫彄徧恄徦彧得怈忚恾彮恋彘悋徔征怟恊悜忞恾念徝快彎徆彝彩悈恀怦恣悫庝彸往怛悍恊恥彯悧怶徑徯怏很惎忒徉悍当忴忽彂息徶总弨怂悙恜忐怬彐恡怬恋恘恆彦弜待弞徟忖彅弣徠恭忉廼循怊恧恀德徳悆忬張得忖彳徟怗悀彛忐徘恣悛怜恄悙彟忶恃忕快怒弢彾徏悘忂恮徊彋彐弰德怭怛徽徵惪徸彌彮怋悎忿徧忒忏怽忛异恚彬恛怵恧弦怷快彵忕怦忿彐徢恶彼徙强怾归悬忧忀悆怓復悗忼怺得忘徛怷忼廉恻怦征恞怿怎恨恬弽恗怡忟庨怽怐悧忻怆廧怈従徻怛彤悱弌悚恩従怴彲徟徚庥循怈彶张悍彋忒恩廎怢怈怎弫志徴弰怤徭廠忌復徹忈徺律廂忈怴弖恢忽彺念态庾徎形彤徿念庩彠当性悎徍徎悫彰忪弱徯徙彆弣彐徤悊徑怅忂彨怟怹忾怿恒徚彅德怋忔怬弍役态廯念忶悋悭怀彡徚徴徾恱恰徦怱态彑悈徠忶彶怒恘心微徢彏怿忏怡恫悋忸恞恕忏恗惓忐怀悝录很徆怅忈惎忕徾悳忆忦弿怠徼恻怃彝忧悆徶悺怆悦徃悝徼怜忐径悘恗徊徔怶怸恭悞恨悝恨悞恆恿忤忶悮怤怍怛怐惟微忶怬总怂悟忮忳忨恮悕徏御径忆怇怵徯怿惟忥悌恋恵徬念彘怞怫悞弽彝恬悌弾悦怅復悸憎恀彗戨悺恩恋徛念恫愞怞怐怖彶想徢愊懭忿後忖悾徭戆微怃悜愝悒悠恫悤怍您彎恭忚怙彴悌恻彭徟徜怫憯怛憑慚慣惌徼忪怔念從弾悛怋忢恹憢愤恹懬悴徂愋悇悲徰慡徱怾忀彭愚悪悭悭憚慛悢惤忓恹必慬忛憹愻怏悇徯恭愳忏懐徽惽徰応忇愅恗愠怡徤恤惬性息恌憊忬恾役恊悃徲悗悁戕恵徙慡愋怱彗彞懓恈怙恙悘怴恙忎徍怌忝恎惜忒恸惷彡恰徖恐恛惫忟忡忠徭悙录恙徹恤忆恾悲徍忥悇怔怐徃彸忁怖恴总悎徯征忥徥德忐怑悧徂彝怠恰忞徴彠忎怔忻恐悄忳徭忉恜彻彗忹恆忊恠思忢恆悛徴忮惛悅怩惿徹惯性忪恈徖怾恺忍愃忎忻恨怎怎恖恐愌悗怟彩忑恍忀恆忠忧径性悶彅徰微怖憎彨忬徹态忷悓恥恖恧悀悍彌忤德庼怽忕復怖式恎忀徿恩忂忟怜忦徬恼恓從弹忎徾忴廜怳弲徚恇庡恍恣恘很悅悀恑怋怅彫忾怤忻廣恉弅律怲恎弾徐异悐徿廻弣徿怀怕恿弋忋弚徼徺怦恨彄恳彬怦徎庹徤弴徽径惃忟怚怜怪彿彷怉怑恠心态徚当庣徉恋弲徴徨悱廄徇弾廱忲恹恺恃心怢廸恏庵廫徠徴忹惭弽忛彬廂徻思徿廁忻彊怫恡恈忓彾恑彿悡忢庸徇怗弱恤忶彂弬悲彺忍徲彫徯彪恣徚彣志彘怒徺徉忩怜怎庾徸恷悑忳彋恅廻志彅康忋徹怉弻御怄徛庙忄怐忻忚废很很徖徙恀弪忰廝忊忛忡忙庺怛恫廏异忻彻彉悑彠怟弻徛弘徾徔忄恺忚忴悮廝廵徽怃恝怢弗忦往恶忺徎延徂怩忽忙悚徯悩怅忙怾悟忡恖忰悮忇彁廻悇後嵊恴徤怵徺怲怍強怔彵忌忟徢廧彧弭徺悟恞彜怙彶悫怢徆廷彅徎怚愐怵怸悤悵愣悒忸彮怴恄怽忻悤忰彈弸弘恊忙忚愇忖怕彴恤怎恇忡徭忥影惚彥徰彴形彥弥快徽怒恶忦恽廗忡恼怤彨彮忪徜弼忔怳庶悅廱度忙恥彝怖巠恹幵忪忰悉恃忒悌後忞恂忮恂廭応徤忟待彻忙悧怔悊恗忢後屃悓恣庅怍掺忤忏杇怑怘彚怛恥恐搉心徜悞忉捏悯摦掷悁微徻怯徿摲悉忈悤挻您径恰感後悁徯恂惆恕怡恺扰恑悚徆悤捡徊政攳扜患忞恇恓恬忡恪愁恈慼悶拥慒愔摒忻恜掟徬挤忰按徇怶恃徜批怰悑扸揞捤忹揋戀悂怮掵愷持擥恬悩忇怹昌恦摱惬掲彴愫怰怛徹掔徭惶怅抩怘怄悘拁彣怯悭憅恆恼悙息敝忨恁摝捌怿恤怤措忆恨恾徥徨忭恗恢恗怭恿意忐憉息怎忶徊徰悡悃忱忆恗憂恆怉悘徛怲弻心悈徭恔忓悰愳忯恳忼悁怒必慏戝恆忬悖怃忯愂悄恤忩弮恴怹悐惝性憷态徘意怉恁忂恙怑彫彑德悂恮彷怫悟慮徎惘怋徜廭惗怏恕惪怂忠怄恗懽忛愋彦慶怹悝怟弻您惈恏彫怜悾形怡徊愵忆怬您忀愍忍怱彐戗恅恡憀愧徏忈恗慚悌忴彩彵忨忨徥悤忐彰恟彠恊悠悐息恜恶恁徆忷彍悞怚恿怱徽徻弪快恢忲悎怸怠恝徫怇悱态彡徭怘怖愁惵徤恍怚忷悂悐徢悋形怉惻必徉惀彾悡彘恰恘怅彄怒徧忁悪徕彌恥怚徆彖忺徾恬往惧怀怓恕徑思怅忲恣恮悝悞恗忏徐怛怙恿忀弲得恞忧怍彂恪恸悟得怬恑怉悕得惚恒悟恧懛彮徖悞悙悳急忻拹忨怢彫徾怍恊惧徖忔彨怤徬徆忤悖従忩弿彅悩悙怠徑怭怛悊怒徝彁怢彘彰德怍恚悛恭悩恄徔恥怺悼忛悈悂恆彃恓忧悿悾恮惂张役忰徵怘忙彗恢怸悰悵恺恣忩忟恆忈彬彘恊恕徜忐忧忱悮恴忇怷徿怦录忢怌怫怴忁悺懍恷愆恋恦徙徤彡忣悭忽怠弈復恴恳悬您悫徰弳恟彞惀怤恟徎慔怾忭惌忞崵悗忠埲徴忳怄恽悀悲嶅徣患忟彞巺怦尀嵗得忔很徱彧屾徽悏徎崵忝怽悞忄彩忖恗忦徫彆徹悄幹彵恊恡心嵈怢寁審庅彵徯從忾怠恧彍弣忀庪怴幋弈怡嵅徟忰岾怌峚徃崤恃恰怠必崣很恍廟巐巖悪岁幙循悖峟彿峵屩悕忀怽怲娃彟尪徊嵍彦怫彯徹怑岄悔弭怡帋恗悠彉嵭恐志恉幹廛怉很後奊徵恟岋嶲悭怄彥忍怛忿徼恺惘忂怳息惄悲忠怸怖忤恱怢怍怰归总悮悧怘忥徴彣怢忚悤恈怠彸归律忌怗恩悽悏彸恣总恡性忳悗恷徣恻恆恏快忙恶徃徘徱恫怟恨忊恛彏彙怊怕忏彧怄怦忣忨彽忡徒忎忄怛恉思忥悃怷徇怶悲恘忲恲恤徭悴快彵忔恌恨忞彍徇怐彯怑悥徹恻恌徾徢彷心恼恮悐恡往怨快怌愝復悀悘恚惒彵徬恁彈总彐恹怞悬悆忠彯恵怨恇恪悧怷彎恓怿忓怡悍悴怞恡悁忈忒忥怃征忈忯怎徰得忯彔忆悖徙徊彲惢怆怺恰惀恞彪悦忨彺徳忋忮惆急徟惬怘忮恘怄怋恝恗恿患悁忺徰悜怠怘忥怍怯怵恞怿惯彩怱悲怠悧怶愡恫悥彌恷惞恊恤恥惢怖愖恸惷悬惷恽徯忱怼怯忂悯恁徢忰忤悴怑恶彵彋怆惕恉惯忛怟恍忨怘徟恐徏悌忤徚徦征惕悁彰怂恻怙彃忽怌怾恗恘式彋悅恨弼悕彜忥徛徂彞怵恰彧很忤心徢怶怩息恟忪彌廽恠怈廮忛弓恷忋怠忤怀德庩張弣恖怴彾恆怊怖彌张悮彠怜彝弝徊徸开恧怷徊徬怑忡弙徾录忇息復忀忳従德必怙忡廑怮彣怚忞彾怣忉彄影弶怈怨怴忍怞彊怌徰悫応彎悏惙徲怆廾恕弽彻廭忂彚怓徾彶徼彗忄怦怘徘惚忙怲徭弯录廦弽徠怙徼怐廋恩忆悈彣怯彳彫怤彨徍忞快怫怼彨彦徏您忳悏忸徔怕忄廈廷弔徭彃怫恾怑怳弑怌廸恒徰徕徊復悑恱影悃彘忓彸忊忂忥忊弡弋怌弉彷徟彺怸必怓忿忄忶怈忹徘忘恁徽幩态弣态必彴彟徟弮恫弓怬彰恼廡恧恈怔彇彻怇怳弤徾恃恌彎彿彼忍怒彋思悟恫幊恚悄忾恒恔彨怠彈急悳悝徭彔忓彶恘悵彈怶怔忿悃怟悋弫悆怍徇廮悑急恿彩彡徺怶怐弥忁彜忢怖怯彐忀忍弿忦怩廠忎恥必忋忟忾思徤忡恧徾徛徉怷悇心弗忳彅彍悆忐徎怵徛彧徛彀怣怣怘彊怘彑忕徳恻彟忟恋忣恚庼悃忞廾往徱念庼律悭恳彍总怬引復恕忇往忸怳徥恁恤恬恙忊忛徭徲彍弝彍恎悍徥忱恝徔径恔恑心怱怷徆彴彴很忠忒恊怹徼徼徺悖忐彮悴忨忑忇彏恓怰怞径悏忬徙总当恙忁徺恂忣恀怿悁悱徘徙忯心忇怦恠忨恠徵幽忕悛怸徎忠录念怒徰怵录応彎恐忄徇怹忺後恼恔恝恹悝徵彿忋您悆恮恬悏悗忧悑忹徢悔徧彪恪悝徽恘录彿恛恿忖忻怟志怖忮快悸怶忭忉恇後怕彔徠怇恋徻徱恳怈忄從恢彩彴忝忼怄恳忯悗役怊恴悺忣忂恂惕忢忖恜微恸忙恞恬怲悓忏恟忭恓恴忣律忆忟恪恆悶悓徛忑怫恥悭恶惗怮悩恟恃忥彙恎怵怣忎怖往怍徸忑悉悞忈忲忻悇当彽怒悜怲怋恊悋惁惼怸怊悾忙悔悦怗悃忙怚悤彝彜怫恈忪恴忞彼恇悏忙恸忝怲恖徱悢悟恐彲恫恢悬怹惜恀悧怚恲彳恜怮愑忏彴忹徣息徕怋忐恤怷忕怉彜恾恳悛怅彑律忂徶忪彞恔怓徵恮徰彝彘怊恊忂怺悏怣恒恇心怩悔怏弰徵悜徤怘徒徥怊庎征恣怦強恿怌怮恫廾徒悒恑恴徺怠恇忞恫徥徇恕忎弱忛恡怐悀彿彵忀怍怱恛形忆庒忸怦悄徂弰悚徤怙忾徕庺悂恺待怌徜怀弿得彌彧恩恇忞怐徼忕徟弸恐怨悳怬悶怊怙忭彸彶徢弞怞忝忻忍徇彷忔忣徦怵怼徝彮总恑恔彘忔彔怲悌怶怕恂忪後恧忽忾弸怟忯微徦彅徬徽恁応怭忭彫彡徻弯恼徉徝忱忑幧怊必徣怔怟恚往徾怶忑径徲弨悧忪徸忎彔彯徊怚徥彺恽悕忧悢怑得怪怇徙彰恅徚彫彐徰彧彩忔徇恻忏彣徜弓徥忂忦恎徦廻怈思循弦恻忤徇忪悁当必恟徯彇怵弿怯悙恕彧弧彴怋弰彅怮怟怾忞徫忧忢怽恛徙忖彣形恾彷徨忻徸彶恉忄徴徠忴怳忴彞徏忛忥忘恺忴恪恺怆悆彘怇恶得悚忦恲恹彭恰徣彯恟怫恴彨徺忲彾忯忂得悊悄忤恡忖徾怄怷彔悀悰息怣德忞恿很徐彐恖彦怶息彽念彄患忐征恴悵恐影怾徫志悝徇徤徰恓恸忰彶徬彖恨忠復恏徇怍怯怓怓忆恕忬彾恅忭忘彵忨忇徖彨忼彷怋怆忌徳恄悚恲恑彾悐悇悐忬徣彩忺怳徲忦彝怩忋怫思怹忬怾徻悥忽徲徥忧彖恣恝恃怓怚忄怖徬怗徔徙忉忽彎忊徊彲忁弿怰恎彭怗怎忏忹弴徐怩悊強忨彐悥忨彽恮忝徆悘怡忎徦怹恩怐徛急恔悗您彫恈廽悽徰快忎彺彻彛恰张弫忎彖徦怀廪恍徯忚循悢怐忶忾怈怲忭忌彫彼徿恭恣怍恾徘徚待影恃恤悃忈怩悊彣忸忰徂恜怕恰怂忱忱恱忩怊忀怷恊悈怼徽恨悱忥徬恄悥忿徿怷怔徃恿恏徱忈形彮怎恶恗悕忏彣恋彟怞徰怐忿彰悚怜忌徇得彲怺徸恹必恊忺怆怊怌悉怒怚恺恈忊徒恋後愓忋忭忿恫忎彽恲怄恅怹悟彼怙怃息忄很怽德忚復恋恚律悋悙恇悭怺彍忇彟悺悏忪恭恶急忑徝忔恦悄怈恥恇徘忣悞恦徫怌徽恬怍恽忣律彾彜恣悉彶徥徇彿恱弢彦悯忲徿悖恦彫悀恼徒弆惆悇恛役怠弮彏悓忲悟悉忌忽彾恒忍径徫忻彆彷怀彜悹怇彨悵悡恦徻忀徱忄忝忟彦弧恰悭怪彞怫怽彑徽忻徇您彥徉怦忬思忣忬廘快恚徣忀怅彁怉怒忶恐怋归悶怣怯彡忷强廒廌徖彊徿忛彎彟悁待徂忠彘弌恫怭恁彍忯形延従徏徼弤忕恝怆彀恻従循忰恰彥怆恻彤悅恙徺恅忡念恒急怶恵徙廛彦徱影弱徆恈怇忢彩彞忢彴怢怡恞怘待忂悀忰悙廮徸廴彣廨徼恝怜彽急恍怭德徸惁怯必怃怗弤彶怂徰忻徢怚怮彮恻恋忹彦彦彣恊廻忸忳弥徚怌恈彦忥彑弎忴徙忱悙弌恫弪录役悩志従怰悆张得彑徙弊悰徊怇恈彍忼悔恥怲律恁循彅恚彭彆怸忟恰彏庿徣悲悈悔忡悋恬忤恭恮恨忪悬徿怶怒彺悾忓怶悾恎忆悌恄怀忔恑応恸怷恛恱徙恏恜恔惘怶彷您怨恅悖息恡怾怼悂惥怾彭彦恕忐惀徰徸徸慞怢怅律恮応忽惍待恛怍恵愰彟彡怠徙怍惲您录怉愇悠愢恠忨御悫恷径悴怩忣忌恀愩惑恔怊怬悻形怨怎怲怲惜悔徉彸惏徼恛悀惃忊忋当徐惩恹忢恥怓恬心忈復思悞恾怳徜怕恗忎形彜彨忆弫彳当彬忞怈弼恰廒微忐怰従忙徼徧得恃忖徟忬彧恱徻忴快徍忧徍忎弃怶徆恞徣忰悰式徸彻彖徽庝庖徂恧彤御彗彆怴志弸悀弐怄忯怿怳弯恜怂态徶廲廏彠恞庱徭彶恹恧彥忘恚忦彚怜彤怳応徳怣彁悠忝微徥徢廭恩廝彈怓彛彘恐怖悰忣徜怶怄得恇怴彘徯忼廬彂悎忙恁惼怜忎彡怦徸恚恺悧怰彽忣徖徰忖惀怼患忭廪徇微怃怙恋悗悔悡必弗恚怬徯徳彫徽怾徫怖忪怼後怚徑恏徿彮怌徕息彇恀性怰忐徺忕忀怮思徥忷恍徧悥思悔悇忶徜怄忉悂怟抦忷從忀徿忇徚悂彖怡悊怭恰忖悌念徢忲忪忓忽怴怚恵彪忁復怈悌恆怘彺徔惃怸徨怱志怊後怽怮恙怷怞怹怼循彲徎恏彚态悂彛彪怪恺彧徧忇恉悍悰忭彈弃恤彚恇恬徐怪徹怩彘悘忘怙彯徱彍忧弧快恣恻悇怘從悚悰弚彲徔您彮廾怪忚忤急怑悷怘恅悥徘快庺当忛怚忳徝廅彺徽忨彫怚徥彎彛忇恄怋彻恷従忍忟庡弪徾徝弦彛悉忷忓廹徭忣恙怊徃念怏总忦弥怮徭忋怢恨徯忛忪徟怞怬怎恫忪徥怼悃恌徯悫悝怟弁彤後弹恞忭徹怣廏忈徔徳忪怳徛怂悈徤恰忤微忤怸彦彫怹弟忚彿廡怪徒忪徧忔怉徯忒急廢徛怡彶恞忶徼忘恔彤怍怠彩怷恃恛徥復忂御忌怈復悛彛忀徰恙彯廗怄徴彽徣弙往弟悕徛恧恿忴彥恄忮忤忝形廻悯弚怃徴恚廸怳廰忟忏徺悢徳怚忏廲彣废彝彡弬怌恖庶忡弘弰弌彥患忠彘悥徿徻延忔忊情怮彌忶悀廐忶悁怢恣廞患忖忕彷恙彮息恠彣彪彬愇恿惝愜怏怐恄惍恜慹悢忲徆憱您念恙惠恬悴怬怬恿忷怋彛慯怗忡忟怯惟悀悂慔愄愧忣悓徙恒悘忢戮慻慲恮恇惺惭愌彧恆惨律惁怎慈悦彏悔怗巬惐急惐愐惕徴愄惾思徱怨愾憋忘彛悢忻忁恌徟怙悎惚怎悍怜惸待慭恴憋愸愠彐恨忟惷恲怶彪愮彚忴忡忽惊怡悩愻恉庉徶怨怚徒恅恁悟恄徭庸性忂徺彶廇徐庘彊忘怔忚廽征廓恅悊必幁徲徯後怔恷彿徑怾徼悢怯恑彜徑恈彬徟庬很彩忼庽徠徵彻彫惊忄悇廔嶧帢悈忐張庁徵彗彽廤彫忰恳幁徺徕弗忢惐幑徝彷帒彌怴庄庎從怮徟弩巜恖徳忩悧徰怰徿廣弔帽怤怺悃径恱彆徾府彚廵悺忆怩帮徾形恍廡愗従悵忭帷弊悷帲忇忟徰悒憟恔怳恦従快彝彺徒恘彘怘忇弻急彔恩彬彖忄恷徍恠忭怇彍忊怰忄怦徨彅悎怇恆恋徔怼彵怉心怫忥恾彫得惒忪弃彸忨悢忭怘思廣帥年志忡弡廔惐彙忕必悠忧恾廾恤忘彆怀徸廭恸快廵忰忱怞弔悒徏徱怗廜恻恳彔忕怢恤徔恻忏彗悩怆忛怦徧弍忆徦彷徰忂恰情弝悗弍応怣惬当怆彴廗張恄弅怣幽恾彼廨恈彧恒恓彘怦弅怍征御念巓彌弋弨徛徙急彽徐差彨徉当庌悑怓律彅徥忱忰彚廻恑悂応巽悧恓恆忕廋徂彴弩庿弡悦忒彖怏当恵庯幈幽徘庚弘徏弯恖悪帚恃彡怺庹恲恓忔怬愽弤怗帶店帳忺庴度悑弈帗忕座彁忣患徔悴弁怮彦彾庁忍弿弻庵彍巀恌彠庿弎惁従彵底怅廻恖庍徳怨徙忒帒忁怡市幯建悊怺徚忦忸悱悡彩彰彙彮忥忡忷币徠廮廪徚念徚怳後庖忢影恱庍怲彴忞忓忲彳微忄彘怫悍彼幽恩很悈悩帋忦庥忏帐弁忲幪悊怦徑怡弤廂帲忙府廳弝廗徧悮庋徚廁影幁忝悠弰悆恝幂忸平幠弗恠幣幆恜怜幼忉嵙徶恙怰怒恌忋徬庥彝廂悱念恂徳怚帝怸廕廼巽忚恪彽帆怰怗恍庺怒徬您彝峨彋恚嶸彚慍徴怂庽徵恨恊徑徑怙悹恧怲怛恒戹怚愯悭強恹怼惈思愉往徜怪憸怃恦忔怫忼愅怸忛惘忹怓悞惙徳怟怹悢惇恛悟怂惃惷彘愳当恊忛弡慟懤抑徐愣恮戈总御悆惍忓慉恼憮悜怒憉录從懑徳愜房慏忄懺慇忪惦愰惦扢恴忟忆忁彞彫怙愐悶我悃忑徑慠恛憦忧愃惣愋怔恀彈戚忾慟悄愮态彥彍徙懚悄悌懳悶'''

fc3_bias_shape = (50,)
fc3_bias = '''悶徶彩态徙忧悗彠徶悺愫悊彠弤悗憓悢弫忠彙挈慿恺怣崵怜怲异得当怃忨归弶恜恁悆彾徇悅復惦彧彅惊幌怚巣廖慿'''


class Conv2D_Numpy:
    def __init__(self, in_channels, out_channels, kernel_size,
                 stride=1, padding='valid', dilation=1, bias=True):
        self.in_channels = in_channels
        self.out_channels = out_channels

        if isinstance(kernel_size, int):
            self.kernel_size = (kernel_size, kernel_size)
        else:
            self.kernel_size = kernel_size
        if isinstance(stride, int):
            self.stride = (stride, stride)
        else:
            self.stride = stride
        if isinstance(dilation, int):
            self.dilation = (dilation, dilation)
        else:
            self.dilation = dilation

        self.padding = padding
        self.use_bias = bias

        kh, kw = self.kernel_size
        # dilation effect on kernel size
        self.kh_dil = self.dilation[0] * (kh - 1) + 1
        self.kw_dil = self.dilation[1] * (kw - 1) + 1

        fan_in = in_channels * kh * kw
        scale = np.sqrt(1. / fan_in)
        self.weight = np.random.uniform(-scale, scale,
                                        (out_channels, in_channels, kh, kw))
        self.bias = np.random.uniform(-scale, scale, out_channels) if bias else None

    def pad_input(self, x, pad_top, pad_bottom, pad_left, pad_right):
        return np.pad(x, ((0, 0), (0, 0), (pad_top, pad_bottom), (pad_left, pad_right)), mode='constant')

    def im2col(self, x, out_h, out_w):
        N, C, H, W = x.shape
        kh, kw = self.kernel_size
        sh, sw = self.stride
        dh, dw = self.dilation

        # Calculate the size of each patch with dilation
        kh_dil = self.kh_dil
        kw_dil = self.kw_dil

        cols = np.zeros((N, C, kh, kw, out_h, out_w), dtype=x.dtype)

        for y in range(kh):
            y_max = y * dh + sh * out_h
            for x_ in range(kw):
                x_max = x_ * dw + sw * out_w
                cols[:, :, y, x_, :, :] = x[:, :, y * dh:y_max:sh, x_ * dw:x_max:sw]

        # Rearrange so that each patch is flattened in last dim
        cols = cols.transpose(0, 4, 5, 1, 2, 3).reshape(N * out_h * out_w, -1)  # shape (N*out_h*out_w, C*kh*kw)
        return cols

    def forward(self, x):
        N, C, H, W = x.shape
        sh, sw = self.stride

        # Compute output size and padding
        if self.padding == 'same':
            out_h = int(np.ceil(H / sh))
            out_w = int(np.ceil(W / sw))

            pad_h = max((out_h - 1) * sh + self.kh_dil - H, 0)
            pad_w = max((out_w - 1) * sw + self.kw_dil - W, 0)

            pad_top = pad_h // 2
            pad_bottom = pad_h - pad_top
            pad_left = pad_w // 2
            pad_right = pad_w - pad_left

            x_padded = self.pad_input(x, pad_top, pad_bottom, pad_left, pad_right)
        elif self.padding == 'valid':
            out_h = (H - self.kh_dil) // sh + 1
            out_w = (W - self.kw_dil) // sw + 1
            x_padded = x
        else:
            raise ValueError("Only 'same' or 'valid' padding supported")

        # Extract patches
        col = self.im2col(x_padded, out_h, out_w)  # (N*out_h*out_w, C*kh*kw)
        # Reshape weights to (out_channels, C*kh*kw)
        weight_col = self.weight.reshape(self.out_channels, -1)  # (out_channels, C*kh*kw)

        # Matrix multiplication + bias
        out = col @ weight_col.T  # shape (N*out_h*out_w, out_channels)
        if self.use_bias:
            out += self.bias

        # Reshape output to (N, out_channels, out_h, out_w)
        out = out.reshape(N, out_h, out_w, self.out_channels).transpose(0, 3, 1, 2)

        return out


   

def adaptive_avg_pool2d_numpy(x, output_size):
    """
    Simule torch.nn.AdaptiveAvgPool2d en NumPy.
    
    Args:
        x: Tensor NumPy de forme (N, C, H_in, W_in)
        output_size: int ou tuple (H_out, W_out)
    
    Returns:
        Tensor NumPy de forme (N, C, H_out, W_out)
    """
    if isinstance(output_size, int):
        output_size = (output_size, output_size)
    H_out, W_out = output_size

    N, C, H_in, W_in = x.shape
    out = np.zeros((N, C, H_out, W_out), dtype=x.dtype)

    for i in range(H_out):
        h_start = int(np.floor(i * H_in / H_out))
        h_end = int(np.ceil((i + 1) * H_in / H_out))
        for j in range(W_out):
            w_start = int(np.floor(j * W_in / W_out))
            w_end = int(np.ceil((j + 1) * W_in / W_out))
            patch = x[:, :, h_start:h_end, w_start:w_end]
            out[:, :, i, j] = patch.mean(axis=(2, 3))
    
    return out

import numpy as np

class Linear:
    def __init__(self, in_features, out_features, bias=True):
        self.in_features = in_features
        self.out_features = out_features
        self.bias_enabled = bias
        
        # Initialisation uniforme U(-k, k) avec k = 1 / sqrt(in_features)
        k = 1 / np.sqrt(in_features)
        self.weight = np.random.uniform(-k, k, size=(out_features, in_features)).astype(np.float32)
        if bias:
            self.bias = np.random.uniform(-k, k, size=(out_features,)).astype(np.float32)
        else:
            self.bias = None

    def __call__(self, x):
        return self.forward(x)

    def forward(self, x):
        # x shape: (..., in_features)
        y = x @ self.weight.T  # shape: (..., out_features)
        if self.bias_enabled:
            y += self.bias
        return y

import numpy as np

class PolicyNet_Numpy:
    def __init__(self, num_players=10, num_actions=5):
        self.num_players = num_players
        self.num_actions = num_actions

        self.conv1 = Conv2D_Numpy(in_channels=83, out_channels=8, kernel_size=3, padding='same')
        self.conv2 = Conv2D_Numpy(in_channels=8, out_channels=16, kernel_size=3, padding='same')
        self.conv3 = Conv2D_Numpy(in_channels=16, out_channels=16, kernel_size=3, padding='same')

        self.fc1 = Linear(in_features=16, out_features=64)
        self.fc2 = Linear(in_features=64, out_features=128)
        self.fc3 = Linear(in_features=128, out_features=num_players * num_actions)

    def relu(self, x):
        return np.maximum(0, x)

    def eval(self):
        pass

    def forward(self, x):
        x = self.relu(self.conv1.forward(x))
        x = self.relu(self.conv2.forward(x))
        x = self.relu(self.conv3.forward(x))

        x = adaptive_avg_pool2d_numpy(x, output_size=1)  # shape: (B, 16, 1, 1)
        x = x.reshape(x.shape[0], -1)  # shape: (B, 16)

        x = self.relu(self.fc1.forward(x))  # shape: (B, 64)
        x = self.relu(self.fc2.forward(x))
        x = self.fc3.forward(x)             # shape: (B, num_players * num_actions)

        return x.reshape(-1, self.num_players, self.num_actions)


def softmax(x, axis=-1):
    # Soustrait le max pour éviter l'overflow numérique
    x = x - np.max(x, axis=axis, keepdims=True)
    exp_x = np.exp(x)
    return exp_x / np.sum(exp_x, axis=axis, keepdims=True)


# 2. Multinomial sampling
def multinomial_numpy(probs):
    """
    Simule torch.multinomial(probs, num_samples=1).squeeze(1)
    Args:
        probs: np.ndarray of shape (batch, num_classes)
    Returns:
        np.ndarray of shape (batch,)
    """
    batch_size, num_classes = probs.shape
    samples = np.array([
        np.random.choice(num_classes, p=probs[i])
        for i in range(batch_size)
    ])
    return samples

def decode_unicode_string_to_weights(unicode_str, offset=12.0, divider=2048.0, shape=None):
	# Étape 1 : reconstruire la chaîne binaire 'weights_bytes' comme en C++ wstring -> string
	weights_bytes = bytearray()
	for c in unicode_str:
		val = ord(c)
		weights_bytes.append((val >> 8) & 0xFF)  # octet haut
		weights_bytes.append(val & 0xFF)         # octet bas

	# Étape 2 : lire les poids 2 octets par 2 octets, big-endian
	size = len(weights_bytes) // 2
	output = []
	for i in range(size):
		s1 = weights_bytes[2*i]
		s2 = weights_bytes[2*i + 1]
		s = (s1 << 8) + s2
		val = (s / divider) - offset
		output.append(val)

	# Étape 3 : si shape précisé, reshape en numpy array
	if shape is not None:
		import numpy as np
		output = np.array(output, dtype=np.float32).reshape(shape)
	else:
		output = list(output)

	return output


class Coord:
	def __init__(self, x, y):
		self.x = x
		self.y = y

	def euclidean_to(self, x, y):
		return ((x - self.x) ** 2 + (y - self.y) ** 2) ** 0.5

	def sqr_euclidean_to(self, x, y):
		return (x - self.x) ** 2 + (y - self.y) ** 2

	def add(self, x, y=None):
		if y is None:
			x, y = x.x, x.y
		return Coord(self.x + x, self.y + y)

	def __hash__(self):
		return hash((self.x, self.y))

	def __eq__(self, other):
		return isinstance(other, Coord) and self.x == other.x and self.y == other.y

	def __repr__(self):
		return f"({self.x}, {self.y})"

	def to_int_string(self):
		return f"{self.x} {self.y}"

	def get_x(self):
		return self.x

	def get_y(self):
		return self.y

	def manhattan_to(self, other):
		if isinstance(other, Coord):
			return abs(self.x - other.x) + abs(self.y - other.y)
		x, y = other
		return abs(self.x - x) + abs(self.y - y)

	def chebyshev_to(self, other):
		if isinstance(other, Coord):
			return max(abs(self.x - other.x), abs(self.y - other.y))
		x, y = other
		return max(abs(self.x - x), abs(self.y - y))


class Tile:
	TYPE_FLOOR = 0
	TYPE_LOW_COVER = 1
	TYPE_HIGH_COVER = 2

	def __init__(self, coord, type_=TYPE_FLOOR):
		self.coord = coord
		self.type = type_

	def set_type(self, type_):
		self.type = type_

	def get_type(self):
		return self.type

	def is_cover(self):
		return self.type != Tile.TYPE_FLOOR

	def get_cover_modifier(self):
		if self.type == Tile.TYPE_LOW_COVER:
			return 0.5
		elif self.type == Tile.TYPE_HIGH_COVER:
			return 0.25
		return 1

	def clear(self):
		self.type = Tile.TYPE_FLOOR

	def is_valid(self):
		# Should compare with a NO_TILE instance
		return True

class Player:
	def __init__(self, coord, team):
		self.coord = coord  # Un objet Coord
		self.team = team    # "red" ou "blue"
		self.last_coord = coord
		self.mx_cooldown = random.randint(5, 7)
		self.cooldown = 0
		self.splash_bombs = random.randint(0, 3)
		self.wetness = 0   
		self.optimalRange = random.randint(5, 10)
		self.soakingPower = random.randint(10, 25)
		self.score = 0
		self.dead = 0
		self.thx = -1
		self.thy = -1
		self.id = 0
		self.idsh = -1

	def move(self, c):
		self.last_coord = self.coord
		self.coord = c

	def back_move(self):
		self.coord = self.last_coord

	def __repr__(self):
		return f"Player({self.coord}, '{self.team}')"


def encode_players_numpy(players, grid_height, grid_width):
	# On utilise 8 canaux par joueur (comme dans ton code PyTorch)
	# cooldown, bombs, wetness, range, power, is_red, is_blue, dead
	tensor = np.zeros((40, grid_height, grid_width), dtype=np.float32)

	base = 0
	for player in players:
		x, y = player.coord.x, player.coord.y

		# évite les débordements hors grille
		if 0 <= x < grid_width and 0 <= y < grid_height:
			tensor[base + 0, y, x] = player.cooldown / player.mx_cooldown
			tensor[base + 1, y, x] = player.splash_bombs / 3.0
			tensor[base + 2, y, x] = player.wetness / 100.0
			tensor[base + 3, y, x] = (player.optimalRange - 5) / 5.0
			tensor[base + 4, y, x] = (player.soakingPower - 10) / 15.0

			if player.team == "red":
				tensor[base + 5, y, x] = 1.0
			elif player.team == "blue":
				tensor[base + 6, y, x] = 1.0

			tensor[base + 7, y, x] = player.dead

			base += 8

	return tensor  # shape : (40, H, W)


def encode_grid_numpy(grid,w, h):
	tensor = np.zeros((3, 10, 20), dtype=np.float32)

	print(w, h, my_color, file=sys.stderr, flush=True)
	for y in range(h):
		for x in range(w):
			t = grid[y][x]
			if t == Tile.TYPE_FLOOR:
				tensor[0, y, x] = 1.0
			elif t == Tile.TYPE_LOW_COVER:
				tensor[1, y, x] = 1.0
			elif t == Tile.TYPE_HIGH_COVER:
				tensor[2, y, x] = 1.0

	return tensor  # shape : (3, 20, 10)


def create_dead_player(coord, team):
	p = Player(coord, team)
	p.cooldown = 0
	p.mx_cooldown = 1
	p.splash_bombs = 0
	p.wetness = 0
	p.optimalRange = 0
	p.soakingPower = 0
	p.score = 0
	p.dead = 1
	return p


def complete_team(players, team, n=5):
	# Garde les joueurs vivants
	players_completed = players.copy()
	
	# Calcule combien il manque de joueurs
	missing = n - len(players)
	
	# Ajoute les joueurs morts manquants
	if missing > 0:
		dead_players = [
			create_dead_player(Coord(-1, -1), team)
			for _ in range(missing)
		]
		players_completed.extend(dead_players)
	
	return players_completed

def encode_ALL_RL_numpy(grid, red, blue, w, h):
	red_complete = complete_team(red, "red", 5)
	blue_complete = complete_team(blue, "blue", 5)

	tensor_red = encode_players_numpy(red_complete, 10, 20)   # (40, 20, 10)
	tensor_blue = encode_players_numpy(blue_complete, 10, 20) # (40, 20, 10)
	tensor_grid = encode_grid_numpy(grid, w, h)                     # (3, 20, 10)

	# concaténation sur l'axe des canaux (axis=0)
	input_tensor = np.concatenate([tensor_red, tensor_blue, tensor_grid], axis=0) 
	return input_tensor  # shape: (40+40+3=83, 20, 10)


class Game:

	def __init__(self, w, h):
		self.width = w
		self.height = h
		self.grid = grid
		self.red = []
		self.blue = []
		self.rscore = 0
		self.bscore = 0
		self.my_color = my_color
		self.IDME = {}
		self.IDOPP = {}
		self.state = {}

	def init_NNUSNW(self):
		self.nnz = PolicyNet_Numpy(num_players=10, num_actions=5)

		# Conv1
		conv1_weight_ = decode_unicode_string_to_weights(conv1_weight, shape=conv1_weight_shape)
		self.nnz.conv1.weight = conv1_weight_

		conv1_bias_ = decode_unicode_string_to_weights(conv1_bias, shape=conv1_bias_shape)
		self.nnz.conv1.bias = conv1_bias_

		# Conv2
		conv2_weight_ = decode_unicode_string_to_weights(conv2_weight, shape=conv2_weight_shape)
		self.nnz.conv2.weight = conv2_weight_

		conv2_bias_ = decode_unicode_string_to_weights(conv2_bias, shape=conv2_bias_shape)
		self.nnz.conv2.bias = conv2_bias_

		# Conv3
		conv3_weight_ = decode_unicode_string_to_weights(conv3_weight, shape=conv3_weight_shape)
		self.nnz.conv3.weight = conv3_weight_

		conv3_bias_ = decode_unicode_string_to_weights(conv3_bias, shape=conv3_bias_shape)
		self.nnz.conv3.bias = conv3_bias_

		# Fully connected
		fc1_weight_ = decode_unicode_string_to_weights(fc1_weight, shape=fc1_weight_shape)
		self.nnz.fc1.weight = fc1_weight_

		fc1_bias_ = decode_unicode_string_to_weights(fc1_bias, shape=fc1_bias_shape)
		self.nnz.fc1.bias = fc1_bias_

		fc2_weight_ = decode_unicode_string_to_weights(fc2_weight, shape=fc2_weight_shape)
		self.nnz.fc2.weight = fc2_weight_

		fc2_bias_ = decode_unicode_string_to_weights(fc2_bias, shape=fc2_bias_shape)
		self.nnz.fc2.bias = fc2_bias_

		fc3_weight_ = decode_unicode_string_to_weights(fc3_weight, shape=fc3_weight_shape)
		self.nnz.fc3.weight = fc3_weight_

		fc3_bias_ = decode_unicode_string_to_weights(fc3_bias, shape=fc3_bias_shape)
		self.nnz.fc3.bias = fc3_bias_
		

	def Play(self, ind):

		ARG_MAX = False

		directions = [Coord(1, 0), Coord(-1, 0), Coord(0, 1), Coord(0, -1)]

		occupied = set(p.coord for p in self.red + self.blue)
		self.action = []

		
		# state_tensor_batch shape: (1, 83, 20, 10) par exemple
		self.nnz.eval()
		state_tensor = encode_ALL_RL_numpy(self.grid, self.red, self.blue, self.width, self.height)  # (canaux, H, W)

		# Ajouter une dimension batch au début : shape devient (1, canaux, H, W)
		state_tensor_batch = np.expand_dims(state_tensor, axis=0)

		# Passage dans le réseau numpy
		logits = self.nnz.forward(state_tensor_batch)  # shape (1, num_players, num_actions)

		# Supprimer la dimension batch pour avoir (num_players, num_actions)
		logits = np.squeeze(logits, axis=0)

		probs = softmax(logits, axis=-1)
		actions = multinomial_numpy(probs)
		actions_list = actions.tolist()

		#print("Actions pr dites par joueur :", actions_list)

		if ind == 'red':
			
			# Actions des rouges uniquement
			for i, p in enumerate(self.red):
				if actions_list[i] == 4:continue
				origin = Coord(p.coord.x, p.coord.y)
				mv = origin.add(directions[actions_list[i]])
				if mv.x < 0 or mv.x >= self.width or mv.y < 0 or mv.y >= self.height:continue
				t = self.grid[mv.y][mv.x]
				if t != Tile.TYPE_FLOOR: continue
				if mv not in occupied:
					p.move(mv)
				
			

			# Pour les bleus on n ajoute rien dans self.action,
			# ou on ajoute une action neutre si tu veux toujours m me taille

		else:
			
			# Actions des rouges uniquement
			for i, p in enumerate(self.blue):
				if actions_list[i+5] == 4:continue
				origin = Coord(p.coord.x, p.coord.y)
				mv = origin.add(directions[actions_list[i+5]])
				if mv.x < 0 or mv.x >= self.width or mv.y < 0 or mv.y >= self.height:continue
				t = self.grid[mv.y][mv.x]
				if t != Tile.TYPE_FLOOR: continue
				if mv not in occupied:
					p.move(mv)


		# Correction position conflictuelle / retour arri re
		# Note: ici, self.action a autant d  l ments que de joueurs concern s (rouges ou bleus)
		players = self.red if ind == 'red' else self.blue
		for idx, p in enumerate(players):
			occupied = set(pl.coord for pl in self.red + self.blue if pl != p)
			if p.coord in occupied:
				p.back_move()


		if ind == 'red':

			for p in self.red:
				if p.splash_bombs > 0:
					zones = self.get_best_zone_for_agent(p, self.red, self.blue, width=self.width, height=self.height)
					if len(zones) > 0:
						p.thx, p.thy = zones[0]
						p.splash_bombs-= 1

					else:
						p.txh, p.thy = -1, -1
				else:
					p.txh, p.thy = -1, -1

		else:

			for p in self.blue:
				if p.splash_bombs > 0:
					zones = self.get_best_zone_for_agent(p, self.blue, self.red, width=self.width, height=self.height)
					if len(zones) > 0:
						p.thx, p.thy = zones[0]
						p.splash_bombs-= 1
						
					else:
						p.txh, p.thy = -1, -1
				else:
					p.txh, p.thy = -1, -1

		self.Shoot(ind)
				
		players = self.red if ind == 'red' else self.blue
		for p in players:
			shoot = ''
			if p.thx != -1:
				shoot = 'THROW ' + str(p.thx) + ' ' + str(p.thy) 
			elif p.idsh != -1:
				shoot = 'SHOOT ' + str(p.idsh)
			else:
				shoot = 'HUNKER_DOWN'
			print(f"{p.id}; MOVE {p.coord.x} {p.coord.y};" + shoot)

	def get_cover_modifier(self, target, shooter):
		dx = target.coord.x - shooter.coord.x
		dy = target.coord.y - shooter.coord.y
		best_modifier = 1.0

		for d in [(dx, 0), (0, dy)]:
			if abs(d[0]) > 1 or abs(d[1]) > 1:
				adj_x = -int(math.copysign(1, d[0])) if d[0] != 0 else 0
				adj_y = -int(math.copysign(1, d[1])) if d[1] != 0 else 0

				cover_pos = Coord(target.coord.x + adj_x, target.coord.y + adj_y)

				if cover_pos.chebyshev_to(shooter.coord) > 1:
					tile = self.grid.get(cover_pos.x, cover_pos.y)
					best_modifier = min(best_modifier, tile.get_cover_modifier())

		return best_modifier

	def Shoot(self, rb):
		team1 = self.red if rb == 'red' else self.blue
		team2 = self.blue if rb == 'red' else self.red

		for pr in team1:
			if pr.cooldown != 0:
				pr.idsh = -1
				continue
			if pr.thx != -1: continue
			idx = -1
			maxsh = -20000000
			for i, pb in enumerate(team2):
				dsh = pr.coord.manhattan_to(pb.coord)
				if dsh <= self.state[pr.id].optimalRange*2:
					if pb.wetness > maxsh:
						maxsh = pb.wetness
						idx = pb.id

			if idx != -1:
				pr.idsh = idx
			else:
				pr.idsh = -1
		
	def get_neighbors_around(self, cx, cy, players):
		neighbors = []
		for p in players:
			px, py = p.coord.x, p.coord.y
			if abs(px - cx) <= 1 and abs(py - cy) <= 1:
				if not (px == cx and py == cy):  # Exclure le centre
					neighbors.append(p)
		return neighbors

	def get_best_zone_for_agent(self, agent: Player, my_agents: list[Player], opp_agents: list[Player], width: int, height: int):
		best_zones = []
		max_enemy_score = -1

		directions = [(0, -1), (-1, 0), (1, 0), (0, 1)]

		for dy in range(-4, 5):
			for dx in range(-4, 5):
				cx = agent.coord.x + dx
				cy = agent.coord.y + dy

				if abs(dx) + abs(dy) > 4:
					continue

				if cx < 0 or cx >= width or cy < 0 or cy >= height:
					continue

				# V rifie que cette case n est pas trop proche d un co quipier (sauf soi-m me)
				too_close_to_ally = False
				for ally in my_agents:
					if ally is agent:
						continue
					if abs(ally.coord.x - cx) <= 1 and abs(ally.coord.y - cy) <= 1:
						too_close_to_ally = True
						break

				if too_close_to_ally:
					continue

				adjacent_enemies = 0
				enemy_score = 0

				for dx_dir, dy_dir in directions:
					ex = cx + dx_dir
					ey = cy + dy_dir

					for opp in opp_agents:
						if opp.coord.x == ex and opp.coord.y == ey:
							adjacent_enemies += 1
							enemy_score += 10
							enemy_score += opp.splash_bombs * 10 + (opp.wetness + 30) * 1000
							break

				if adjacent_enemies > 0:
					if enemy_score > max_enemy_score:
						max_enemy_score = enemy_score
						best_zones = [(cx, cy)]
					elif enemy_score == max_enemy_score:
						best_zones.append((cx, cy))

		return best_zones

# Win the water fight by controlling the most territory, or out-soak your opponent!

my_id = int(input())  # Your player id (0 or 1)
agent_data_count = int(input())  # Total number of agents in the game
stat={}
IDME={}
IDOPP={}
for i in range(agent_data_count):
	# agent_id: Unique identifier for this agent
	# player: Player id of this agent
	# shoot_cooldown: Number of turns between each of this agent's shots
	# optimal_range: Maximum manhattan distance for greatest damage output
	# soaking_power: Damage output within optimal conditions
	# splash_bombs: Number of splash bombs this can throw this game
	agent_id, player, shoot_cooldown, optimal_range, soaking_power, splash_bombs = [int(j) for j in input().split()]

	p = Player(Coord(-1, -1), 'red')
	p.mx_cooldown = shoot_cooldown
	p.optimalRange = optimal_range
	p.soakingPower = soaking_power
	p.splash_bombs = splash_bombs
	stat[agent_id] = p
	
	if player == my_id:
		IDME[agent_id] = agent_id
	else:
		IDOPP[agent_id] = agent_id



# width: Width of the game map
# height: Height of the game map
width, height = [int(i) for i in input().split()]
grid = []
for i in range(height):
    inputs = input().split()
    l = []
    for j in range(width):
        # x: X coordinate, 0 is left edge
        # y: Y coordinate, 0 is top edge
        x = int(inputs[3*j])
        y = int(inputs[3*j+1])
        tile_type = int(inputs[3*j+2])
        l.append(tile_type)
    grid.append(l)

turn = 0
my_color = ''
opp_color = ''

game = Game(width, height)
game.grid = grid
game.init_NNUSNW()
game.IDME = IDME
game.IDOPP = IDOPP
game.state = stat
# game loop
while True:
	agent_count = int(input())  # Total number of agents still in the game
	redi={}
	bluei={}
	red=[]
	blue=[]
	for i in range(agent_count):
		# cooldown: Number of turns before this agent can shoot
		# wetness: Damage (0-100) this agent has taken
		agent_id, x, y, cooldown, splash_bombs, wetness = [int(j) for j in input().split()]

		if agent_id in IDME:
			# C'est moi
			if turn == 0:
				if x == 0:
					my_color = 'red'
					opp_color = 'blue'
				else:
					my_color = 'blue'
					opp_color = 'red'

			p = Player(Coord(x, y), my_color)
			p.id = agent_id
			p.cooldown = cooldown
			p.splash_bombs = splash_bombs
			p.wetness = wetness

			if my_color == 'red':
				red.append(p)
			else:
				blue.append(p)
		else:
			# Ennemi
			if turn == 0:
				if x == 0:
					my_color = 'blue'
					opp_color = 'red'
				else:
					my_color = 'red'
					opp_color = 'blue'

			p = Player(Coord(x, y), opp_color)
			p.id = agent_id
			p.cooldown = cooldown
			p.splash_bombs = splash_bombs
			p.wetness = wetness

			if opp_color == 'red':
				red.append(p)
			else:
				blue.append(p)



		game.my_color = my_color
		game.red = red
		game.blue = blue



	print("my_color=", my_color, file=sys.stderr, flush=True)

	my_agent_count = int(input())  # Number of alive agents controlled by you
	game.Play(my_color)

	turn += 1